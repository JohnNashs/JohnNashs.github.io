<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Gulp与Node版本不兼容</title>
      <link href="2021/05/17/Gulp%E4%B8%8ENode%E7%89%88%E6%9C%AC%E4%B8%8D%E5%85%BC%E5%AE%B9/"/>
      <url>2021/05/17/Gulp%E4%B8%8ENode%E7%89%88%E6%9C%AC%E4%B8%8D%E5%85%BC%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>之前使用的node版本一直是v8.x.x，最近升级了node版本，为v14.16.0，然后在运行之前Gulp搭建的项目的时候，发现跑不起来，报错如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fs.js:45</span><br><span class="line">&#125; = primordials;</span><br><span class="line">    ^</span><br><span class="line"></span><br><span class="line">ReferenceError: primordials is not defined</span><br><span class="line">    at fs.js:45:5</span><br><span class="line">    at req_ (/Users/fuyumin/Desktop/dz_project/gulp-project/hongchuan/node_modules/natives/index.js:143:24)</span><br><span class="line">    at Object.req [as require] (/Users/fuyumin/Desktop/dz_project/gulp-project/hongchuan/node_modules/natives/index.js:55:10)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/fuyumin/Desktop/dz_project/gulp-project/hongchuan/node_modules/graceful-fs/fs.js:1:37)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:1063:30)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:928:32)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:769:14)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:952:19)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:88:18)</span><br></pre></td></tr></table></figure><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>我本地项目的Gulp版本如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CLI version: 2.2.0</span><br><span class="line">Local version: 3.9.1</span><br></pre></td></tr></table></figure><p><a href="mailto:Gulp@3.x.x" target="_blank" rel="noopener">Gulp@3.x.x</a>与当前<a href="mailto:Node@14.x.x" target="_blank" rel="noopener">Node@14.x.x</a>版本不兼容，官网的建议是Node版本退回到v12.x.x以下（或者升级到<a href="mailto:Gulp@4.x.x" target="_blank" rel="noopener">Gulp@4.x.x</a>），那我哪能接受，毕竟我已经不靠Gulp吃饭了😄，于是开始寻找其他解决方式，终于，在我强大的英语阅读能力下，找到了一篇<a href="https://ourcodeworld.com/articles/read/1188/how-to-solve-gulp-exception-reference-error-primordials-is-not-defined-error" target="_blank" rel="noopener">一分钟解决你的gulp问题</a>，不过现在好像打不开了，还是得靠自己</p><h2 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h2><p>首先删除node依赖node_modules，删的渣都不要剩，然后在根目录下新建一个<code>npm-shrinkwrap.json</code>文件，配置如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"graceful-fs"</span>: &#123;</span><br><span class="line">        <span class="attr">"version"</span>: <span class="string">"4.2.2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下一步，常规操作，<code>npm install</code>，然后启动Gulp项目，我的启动命令是<code>gulp serve</code>，你会发现项目神奇般的又跑起来了(其实也没啥神奇的)！</p><h2 id="npm-shrinkwrap-json"><a href="#npm-shrinkwrap-json" class="headerlink" title="npm-shrinkwrap.json"></a>npm-shrinkwrap.json</h2><p>有关<code>npm-shrinkwrap.json</code>文件的作用，我给你们放这了，自己瞅瞅吧！</p><p><a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-lock-json" target="_blank" rel="noopener">package-lock.json | npm Docs</a><br><a href="https://juejin.cn/post/6844903797668462605" target="_blank" rel="noopener">对npm包精准控制之npm-shrinkwrap.json与package-lock.json</a></p><h2 id="END"><a href="#END" class="headerlink" title="END!"></a>END!</h2>]]></content>
      
      
      <categories>
          
          <category> 日常小bug集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序检查更新</title>
      <link href="2020/12/04/CheckVersion/"/>
      <url>2020/12/04/CheckVersion/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 版本更新 */</span></span><br><span class="line">checkVersion() &#123;</span><br><span class="line">  <span class="keyword">if</span> (wx.canIUse(<span class="string">'getUpdateManager'</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> updateManager = wx.getUpdateManager()</span><br><span class="line">    updateManager.onCheckForUpdate(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 请求完新版本信息的回调</span></span><br><span class="line">      <span class="keyword">if</span> (res.hasUpdate) &#123;</span><br><span class="line">        updateManager.onUpdateReady(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          wx.showModal(&#123;</span><br><span class="line">            title: <span class="string">'更新提示'</span>,</span><br><span class="line">            content: <span class="string">'新版本已经准备好，请点击重启应用~'</span>,</span><br><span class="line">            showCancel: <span class="literal">false</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">              <span class="comment">// res: &#123;errMsg: "showModal: ok", cancel: false, confirm: true&#125;</span></span><br><span class="line">              <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">                <span class="comment">// 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span></span><br><span class="line">                updateManager.applyUpdate()</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        updateManager.onUpdateFailed(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 新的版本下载失败</span></span><br><span class="line">          wx.showModal(&#123;</span><br><span class="line">            title: <span class="string">'已经有新版本了哟~'</span>,</span><br><span class="line">            content: <span class="string">'新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~'</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常用JS工具代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wxapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layDate组件闪退（在苹果电脑上表现为点击无效）</title>
      <link href="2020/11/12/LayDate/"/>
      <url>2020/11/12/LayDate/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.layui.com/laydate/" target="_blank" rel="noopener">layDate 日期与时间组件</a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>layDate组件在计算组件出现的位置的时候，如果input元素距离网站底部的高度不够高的话，layDate组件会出现在input上方，出现在上方的时候由于动画<code>transform: translate3d(0,20px,0)</code>,使得组件出现的时候，点击输入框会点到组件本身，Windows上的表现为闪退，在苹果电脑上表现为点击无效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"session-picker"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">id</span>=<span class="string">"sessionPicker"</span> <span class="attr">placeholder</span>=<span class="string">"请选择时间段"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  laydate.render(&#123;</span><br><span class="line"><span class="javascript">    elem: <span class="string">'#sessionPicker'</span>, <span class="comment">//指定元素</span></span></span><br><span class="line"><span class="javascript">    type: <span class="string">'time'</span>,</span></span><br><span class="line"><span class="javascript">    range: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    theme: <span class="string">'#6fb3e0'</span>,</span></span><br><span class="line"><span class="javascript">    format: <span class="string">"H:mm"</span></span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>增加一个属性<code>trigger: &#39;click&#39;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"session-picker"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">id</span>=<span class="string">"sessionPicker"</span> <span class="attr">placeholder</span>=<span class="string">"请选择时间段"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  laydate.render(&#123;</span><br><span class="line"><span class="javascript">    elem: <span class="string">'#sessionPicker'</span>, <span class="comment">//指定元素</span></span></span><br><span class="line"><span class="javascript">    type: <span class="string">'time'</span>,</span></span><br><span class="line"><span class="javascript">    range: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    trigger: <span class="string">'click'</span>,</span></span><br><span class="line"><span class="javascript">    theme: <span class="string">'#6fb3e0'</span>,</span></span><br><span class="line"><span class="javascript">    format: <span class="string">"H:mm"</span></span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常小bug集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试相关</title>
      <link href="2020/11/05/Interview/"/>
      <url>2020/11/05/Interview/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack相关问题。"><a href="#webpack相关问题。" class="headerlink" title="webpack相关问题。"></a>webpack相关问题。</h2><ol><li>webpack的构建流程</li><li>plugins和loader的区别</li><li>webpack构建优化方式有哪些</li><li>webpack的分包策略</li></ol><h2 id="JavaScript的一些面试题"><a href="#JavaScript的一些面试题" class="headerlink" title="JavaScript的一些面试题"></a>JavaScript的一些面试题</h2><ol><li>promise</li><li>async/await原理</li><li>手写订阅发布模式</li><li>bind原理</li><li>new原理</li></ol><h2 id="网络相关问题"><a href="#网络相关问题" class="headerlink" title="网络相关问题"></a>网络相关问题</h2><ol><li>状态码</li><li>http协议中的缓存控制</li><li>keep-alive和多路复用的区别</li><li>http2.0的特性</li><li>头部压缩原理</li><li>tcp握手</li><li>udp和tcp区别</li><li>dns原理</li><li>https原理</li></ol><h2 id="浏览器相关问题"><a href="#浏览器相关问题" class="headerlink" title="浏览器相关问题"></a>浏览器相关问题</h2><ol><li>eventLoop</li><li>关键渲染路径</li><li>加载原理</li><li>DOM树和渲染树区别</li><li>回流和重绘</li></ol><h2 id="性能优化相关问题"><a href="#性能优化相关问题" class="headerlink" title="性能优化相关问题"></a>性能优化相关问题</h2><ol><li>白屏优化方案</li><li>长列表优化方案</li></ol><h2 id="Node相关问题"><a href="#Node相关问题" class="headerlink" title="Node相关问题"></a>Node相关问题</h2><ol><li>egg了解吗</li><li>洋葱模型</li><li>node的eventLoop和浏览器的区别</li><li>如何保证node的高可用，容灾等措施</li><li>node如何发布</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3新特性</title>
      <link href="2020/11/04/Vue2VsVue3/"/>
      <url>2020/11/04/Vue2VsVue3/</url>
      
        <content type="html"><![CDATA[<p>总结一下vue3.0带来的部分新特性</p><ol><li>setup()</li><li>ref()</li><li>reactive()</li><li>isRef()</li><li>toRefs()</li><li>computed()</li><li>watch()</li><li>LifeCycle Hooks(新的生命周期)</li><li>Template refs</li><li>globalProperties</li><li>Suspense</li></ol><h2 id="vue2与vue3的对比"><a href="#vue2与vue3的对比" class="headerlink" title="vue2与vue3的对比"></a>vue2与vue3的对比</h2><ul><li>对TypeScript支持不友好（所有属性都放在了this对象上，难以推到组件的数据类型）</li><li>大量的Api挂载在Vue对象的原型上，难以实现TreeShaking</li><li>架构层面对跨平台dom渲染开发支持不友好</li><li>Composition Api 受ReactHock启发</li><li>更方便的支持了jsx</li><li>vue3的Template支持多个根标签， vue2不支持</li><li>对虚拟DOM进行了重写，对模板的编译进行了优化操作</li></ul><h2 id="一、setup函数"><a href="#一、setup函数" class="headerlink" title="一、setup函数"></a>一、setup函数</h2><p>setup()函数是vue3中，专门为为组件提供的新属性。它为我们使用vue3的Composition Api新特性提供了统一的入口，setup函数会在beforecreate之后、create之前执行，vue3也是取消了这两个钩子，统一用setup代替，该函数相当于一个生命周期函数，vue中过去的data，methods，watch等全部都用对应的新增api写在setup()函数中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setup(props, context) &#123;</span><br><span class="line">  context.attrs</span><br><span class="line">  context.slots</span><br><span class="line">  context.parent</span><br><span class="line">  context.root</span><br><span class="line">  comtext.emit</span><br><span class="line">  comtext.refs</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>props: 用来接收props数据</li><li>context用来定义上下文，上下文对象中包含了一些有用的属性，这些属性在vue2.x中需要通过this才能访问到，在setup函数中无法访问到this，是个undefinded</li><li>返回值：return{}, 返回响应式数据，模板中需要使用的函数</li></ul><h2 id="二、reactive函数"><a href="#二、reactive函数" class="headerlink" title="二、reactive函数"></a>二、reactive函数</h2><p>reactive()函数接收一个普通对象，返回一个响应式的数据对象，想要使用创建的响应式数据也很简单，创建出来之后，在setup()中return出去，直接在template中调用即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"tx"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, ref, toRefs &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">    setup(props, context) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">'test'</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> state</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、ref-函数"><a href="#三、ref-函数" class="headerlink" title="三、ref()函数"></a>三、ref()函数</h2><p>ref()函数用来根据给定的值创建一个响应式的数据对象，ref()函数调用的返回值是一个对象，这个对象只包含了一个value属性，只在setup()函数内部访问ref函数需要加.value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125; //10</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">  setup() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> count = ref&lt;number&gt;(<span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 在js中获取ref中定义的值，需要通过value属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(count.value);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在reactive对象中访问ref创建的创建的响应式数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125; -&#123;&#123; t &#125;&#125; //10 -100</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;defineComponent, reactive, ref, toRefs&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">  setup() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> count = ref&lt;number&gt;(<span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> obj = reactive(&#123;</span></span><br><span class="line">      t: 100,</span><br><span class="line">      count</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// 通过reactive来获取ref的值时，不需要使用.valte属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj.count);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      ...toRefs(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、isRef-函数"><a href="#四、isRef-函数" class="headerlink" title="四、isRef()函数"></a>四、isRef()函数</h2><p>isRef()用来判断某个值是否为ref()创建出来的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, isRef, ref &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">let</span> state = reactive(&#123;</span><br><span class="line">      name: <span class="string">'test'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> age = ref(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、toRefs-函数"><a href="#五、toRefs-函数" class="headerlink" title="五、toRefs()函数"></a>五、toRefs()函数</h2><p>toRefs()函数可以将reactive创建出来的响应式对象，转换为普通对象，只不过这个对象上的每一个节点，都是ref()类型的响应式数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    &#123;&#123; name &#125;&#125; // test</span><br><span class="line">    &#123;&#123; age &#125;&#125; // 18</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; defineComponent, reactive, ref, toRefs &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state =  reactive(&#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'test'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> age = ref(<span class="number">18</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      ...toRefs(states),</span><br><span class="line">      age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、computed"><a href="#六、computed" class="headerlink" title="六、computed()"></a>六、computed()</h2><p>该函数用来创造计算属性，和过去一样，它的返回值是一个ref对象。里面可以传方法，或者一个对象，对象中包含set()、get()方法</p><h3 id="6-1-创建只读的计算属性"><a href="#6-1-创建只读的计算属性" class="headerlink" title="6.1 创建只读的计算属性"></a>6.1 创建只读的计算属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;scripr lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;computed, defineComponent, ref&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line">expoet <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据age的值，创建一个响应式的计算属性readOnlyAge，它会根据依赖的ref自动计算并返回一个新的ref</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> readOnlyAge = computed(<span class="function"><span class="params">()</span> =&gt;</span> age.value++) <span class="comment">// 19</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      age,</span><br><span class="line">      readOnlyAge</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/scripr&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-通过set-、get-方法创建一个可读可写的计算属性"><a href="#6-2-通过set-、get-方法创建一个可读可写的计算属性" class="headerlink" title="6.2 通过set()、get()方法创建一个可读可写的计算属性"></a>6.2 通过set()、get()方法创建一个可读可写的计算属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;computed, defineComponent, ref&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref&lt;number&gt;(<span class="number">18</span>)</span><br><span class="line">    <span class="keyword">const</span> computedAge = computed(&#123;</span><br><span class="line">      <span class="keyword">get</span>: () =&gt; age.value + 1,</span><br><span class="line">      <span class="keyword">set</span>: () =&gt; age.value + value</span><br><span class="line">    &#125;)</span><br><span class="line">    // 为计算属性赋值的操作，会触发<span class="keyword">set</span>函数，触发<span class="keyword">set</span>函数后，age的值会被更新</span><br><span class="line">    age.value = 100;</span><br><span class="line">    return &#123;</span><br><span class="line">      age,</span><br><span class="line">      computedAge</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、watch-函数"><a href="#七、watch-函数" class="headerlink" title="七、watch()函数"></a>七、watch()函数</h2><p>whatch函数用来监听特定的数据源，并在回调函数中执行副作用。默认情况是懒执行的，也就是说再侦听的数据源变更时才执行回调。</p><h3 id="7-1监听用reactive声明的数据源"><a href="#7-1监听用reactive声明的数据源" class="headerlink" title="7.1监听用reactive声明的数据源"></a>7.1监听用reactive声明的数据源</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; computed, definComponent, reactive, toRefs, watch &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive&lt;Person&gt;(&#123; <span class="attr">name</span>: <span class="string">'vue'</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;);</span><br><span class="line"></span><br><span class="line">    watch(</span><br><span class="line">      () =&gt; state.age,</span><br><span class="line">      (age, preAge) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(age); <span class="comment">// 100</span></span><br><span class="line">        <span class="built_in">console</span>.log(preAge); <span class="comment">// 10</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 修改age时会触发watch的回调，打印变更前后的值</span></span><br><span class="line">    state.age = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...toRefs(state)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2监听用ref声明的数据源"><a href="#7-2监听用ref声明的数据源" class="headerlink" title="7.2监听用ref声明的数据源"></a>7.2监听用ref声明的数据源</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref, watch &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line">interface Person &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  age: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref&lt;number&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    watch(age, () =&gt; <span class="built_in">console</span>.log(age.value)); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改age时会触发watch的回调，打印变更后的值</span></span><br><span class="line">    age.value = <span class="number">100</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3同时监听多个值"><a href="#7-3同时监听多个值" class="headerlink" title="7.3同时监听多个值"></a>7.3同时监听多个值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; watch, computed, defineComponent, reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line">interface Person &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  age: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineCompontent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive&lt;Person&gt;(&#123; <span class="attr">name</span>: <span class="string">'vue'</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;);</span><br><span class="line"></span><br><span class="line">    watch(</span><br><span class="line">      [<span class="function"><span class="params">()</span> =&gt;</span> state.age, () =&gt; state.name],</span><br><span class="line">      ([newName, newAge], [oldName, oldAge]) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newName);</span><br><span class="line">        <span class="built_in">console</span>.log(newAge);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(oldName);</span><br><span class="line">        <span class="built_in">console</span>.log(oldAge);</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 修改age时会触发watch的回调，打印变更前后的值，此时需要注意，更改其中一个值，都会执行watch的回调</span></span><br><span class="line">    state.age = <span class="number">100</span></span><br><span class="line">    state.name = <span class="string">'vue3'</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...toRefs(state)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-4-stop停止监听"><a href="#7-4-stop停止监听" class="headerlink" title="7.4 stop停止监听"></a>7.4 stop停止监听</h3><p>在setup()函数内创建的watch监视，会在当前组件被销毁的时候自动停止。如果想要明确的停止某个监视，可以调用watch()函数的返回值即可，语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">set</span> &#125; 'lodash';</span><br><span class="line">import &#123; computed, defineComponent, reactive, toRefs, watch &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line">interface Person &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  age: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive&lt;Person&gt;(&#123; <span class="attr">name</span>: <span class="string">'vue'</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> stop = watch(</span><br><span class="line">      [<span class="function"><span class="params">()</span> =&gt;</span> stage.age, () =&gt; state.name],</span><br><span class="line">      ([newName, newAge],[oldName, oldAge]) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newName);</span><br><span class="line">        <span class="built_in">console</span>.log(newAge);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(oldName);</span><br><span class="line">        <span class="built_in">console</span>.log(oldAge);</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 修改age时会触发watch的回调， 打印变更前后的值，此时需要注意，更改其中一个值，都会执行watch的回调</span></span><br><span class="line">    state.age = <span class="number">100</span>;</span><br><span class="line">    state.name = <span class="string">'vue3'</span></span><br><span class="line"></span><br><span class="line">    setTimeOut(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      stop()</span><br><span class="line">      <span class="comment">// 此时修改时，不会触发watch回调</span></span><br><span class="line">      state.age = <span class="number">1000</span></span><br><span class="line">      state.name = <span class="string">'vue3-'</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)<span class="comment">// 1秒后取消watch的监听</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...toRefs(state)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、lifeCycle-Hooks（新的生命后期）"><a href="#八、lifeCycle-Hooks（新的生命后期）" class="headerlink" title="八、lifeCycle Hooks（新的生命后期）"></a>八、lifeCycle Hooks（新的生命后期）</h2><p>新版的生命周期函数，可以按需导入到组件中，且只能在setup()函数中使用，但是也可以在srtup外定义，在setup中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">set</span> &#125; from 'lodash';</span><br><span class="line">import &#123; defineComponent, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onErrorCaptured, onMounted, onUnMounted, onUpdate &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    onBeforeMount(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'beformounted!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'mounted!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onBeforeUpdate(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'beforupdated!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUpdated(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'updated!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onBeforeUnmount(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'beforunmounted!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUnmounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'unmounted!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onErrorCaptured(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'errorCaptured!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="九、Template-refs"><a href="#九、Template-refs" class="headerlink" title="九、Template refs"></a>九、Template refs</h2><p>通过refs来获取真实的dom元素，这个和react的用法一样，为了获得对模板内元素或组件实例的引用，我们可以像往常一样在setup()中声明一个ref并返回它</p><ol><li>还是跟往常一样，在html中写入ref的名称</li><li>在setup中定义一个ref</li><li>setup中返回ref的实例</li><li>onMounted中可以得到ref的RefImpl的对象，通过.value</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 第一步：还是跟往常一样，在html中写入ref的名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span> <span class="attr">ref</span>=<span class="string">"elmRefs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; <span class="keyword">set</span> &#125; from 'lodash';</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; defineComponent, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 获取真实dom</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> elmRefs = ref&lt;<span class="literal">null</span> | HTMLElement&gt;(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">    onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(elmRefs.value); <span class="comment">// 得到一个 RefImpl 的对象，通过.value访问到数据</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      elmRefs</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十、vue的全局配置"><a href="#十、vue的全局配置" class="headerlink" title="十、vue的全局配置"></a>十、vue的全局配置</h2><p>通过vue实例上config来配置，包含Vue应用程序全局配置的对象。您可以在挂载应用之前修改下面列出的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.config = &#123;...&#125;</span><br></pre></td></tr></table></figure><p>为组件渲染功能和观察程序期间的未捕获错误分配处理程序。错误和应用程序实例将调用处理程序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config.errorHandle = <span class="function">(<span class="params">err, vm, info</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>可以在应用程序内的任何组件实例中访问的全局属性，组件的属性将具有优先权。这可以代替Vue2.X Vue.prototype扩展：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line">app.config.globalProperties.$http = <span class="string">'xxxxxxxxxs'</span></span><br></pre></td></tr></table></figure><p>可以在组件中通过getCurrentInstance()来获取全局globalProperties中配置的信息，getCurrentInstance方法获取当前组件的实例，然后通过ctx属性获得当前上下文，这样我们就能在setup中使用router和vuex，通过这个属性我们就可以操作变量、全局属性、组件属性等等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setup() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; ctx &#125; = getCurrentInstance();</span><br><span class="line">  ctx.$http</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、Suspense组件"><a href="#十一、Suspense组件" class="headerlink" title="十一、Suspense组件"></a>十一、Suspense组件</h2><p>在介绍Vue的Suspense组件之前，我们又必要先了解下React的Suspense组件，因为他们的功能类似。</p><p>React.lazy接受一个函数，这个函数需要动态调用import()。它必须返回一个Promise，该Promise需要resolve一个default export的React组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Suspense &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">const</span> myComponent = React.lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Component'</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;myComponent /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/Suspense&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue3也新增了类似功能的defineAsyncComponent函数，处理动态引入（的组件）。defineAsyncComponent可以接受返回承诺的工厂函数。当您从服务器检索到组件定义时，应该调用Promise的解析回调。您还可以调用reject(reason)来指示负载已经失败</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AsyncComp = defineAsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./components/AsyncComponent.vue'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.component(<span class="string">'async-component'</span>, AsyncComp)</span><br></pre></td></tr></table></figure><p>Vue3也新增了Suspense组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; defineComponent, defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> MyComponent = defineAsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Component'</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    MyComponent</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十二、vue3-x完整组件模板结构"><a href="#十二、vue3-x完整组件模板结构" class="headerlink" title="十二、vue3.x完整组件模板结构"></a>十二、vue3.x完整组件模板结构</h2><p>一个完整的vue3.x完整组件模板结构包含了：组件名称、props、components、setup(hooks、computed、watch、methods等)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mine"</span> <span class="attr">ref</span>=<span class="string">"elmRefs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>测试按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; computed, defineComponent, getCurrentInstance, onMounted, PropType, reactive, ref, toRefs &#125; <span class="keyword">from</span> <span class="string">"vue"</span> ;</span></span><br><span class="line"></span><br><span class="line">interface IState &#123;</span><br><span class="line">  count: 0,</span><br><span class="line"><span class="javascript">  name: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">  list: <span class="built_in">Array</span>&lt;object&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'demo'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 父组件传子组件参数</span></span></span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span> <span class="keyword">as</span> PropType&lt;<span class="literal">null</span> | <span class="string">''</span>&gt;,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">'vue3.x'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    list: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Array</span> <span class="keyword">as</span> PropType&lt;object[]&gt;,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> []</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// TODO 组件注册</span></span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  emits:[<span class="string">"emits-name"</span>], <span class="comment">// 为了提示作用</span></span></span><br><span class="line">  setup (props, context) &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(props.name)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(props.list)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> state = reactive&lt;IState&gt;(&#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'vue 3.0组件'</span>,</span></span><br><span class="line">      count: 0,</span><br><span class="line">      list: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          name: <span class="string">'vue'</span>,</span></span><br><span class="line">          id: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          name: <span class="string">'vuex'</span>,</span></span><br><span class="line">          id: 2</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> a = computed(<span class="function"><span class="params">()</span> =&gt;</span> state.name)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      state.count++</span><br><span class="line"><span class="javascript">      <span class="comment">// 调用父组件方法</span></span></span><br><span class="line"><span class="javascript">      context.emit(<span class="string">'emits-name'</span>, state.count)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reutrn &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      handleClick</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue3的生态"><a href="#vue3的生态" class="headerlink" title="vue3的生态"></a>vue3的生态</h2><ul><li>官网</li><li>源码</li><li>vite 构建器</li><li><a href="https://cli.vuejs.org/" target="_blank" rel="noopener">脚手架</a></li><li>vue-route-next</li><li>vuex4.0</li></ul><p>UI组件库</p><ul><li>vant2.x</li><li>Ant Design of Vue 2.x</li><li>element-plus</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加载图片</title>
      <link href="2020/10/29/LoadImage/"/>
      <url>2020/10/29/LoadImage/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadImage = <span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建 image 对象加载图片；</span></span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    <span class="comment">// 当为线上图片时，需要设置 crossOrigin 属性；</span></span><br><span class="line">    <span class="keyword">if</span>(image.indexOf(<span class="string">"http"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">      img.crossOrigin = <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(img);</span><br><span class="line">      <span class="comment">// 使用完后清空对象，释放内存</span></span><br><span class="line">      setTimeOut(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        img = <span class="literal">null</span>;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.onerror = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">`图片加载失败<span class="subst">$&#123;image&#125;</span>`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.src = image;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常用JS工具代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS中new Date(&#39;2020-10-28 00:00:00&#39;)显示为NAN</title>
      <link href="2020/10/28/IOSDateBug/"/>
      <url>2020/10/28/IOSDateBug/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在IOS端中，使用如下方法会获得NaN，安卓手机则是正常计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-10-28 00:00:00'</span>).getTime()</span><br></pre></td></tr></table></figure><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="string">'2019/02/26 18:34:33'</span>.replace(<span class="regexp">/-/g</span>,<span class="string">"/"</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(date).getTime()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020/10/28 00:00:00'</span>).getTime()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常小bug集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS13之后浏览器获取动作与方向需要用户授权</title>
      <link href="2020/10/28/DeviceMotionEvent/"/>
      <url>2020/10/28/DeviceMotionEvent/</url>
      
        <content type="html"><![CDATA[<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><blockquote><p>通过点击事件，触发用户主动授权</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(Android)/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> (<span class="built_in">window</span>.DeviceMotionEvent) !== <span class="string">"undefined"</span> &amp;&amp; <span class="keyword">typeof</span> (<span class="built_in">window</span>.DeviceMotionEvent.requestPermission) === <span class="string">"function"</span>) &#123;</span><br><span class="line">      <span class="comment">// (optional) Do something before API request prompt.</span></span><br><span class="line">      <span class="built_in">window</span>.DeviceMotionEvent.requestPermission().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// (optional) Do something after API prompt dismissed.</span></span><br><span class="line">          <span class="keyword">if</span> (response == <span class="string">"granted"</span>) &#123;</span><br><span class="line">              <span class="comment">// window.addEventListener("devicemotion", (e) =&gt; &#123;</span></span><br><span class="line">              <span class="comment">//     // do something for 'e' here.</span></span><br><span class="line">              <span class="comment">// &#125;)</span></span><br><span class="line">              <span class="built_in">window</span>.addEventListener(<span class="string">'devicemotion'</span>, <span class="literal">false</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              alert(<span class="string">'您的手机不支持摇一摇ヾ(◍°∇°◍)ﾉﾞ'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote><p>通过一些交互，引导用户触发浏览器获取动作与方向的授权，在用户同意授权之后，再执行相关操作</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常小bug集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pxTorem和autoprefixer同时使用</title>
      <link href="2020/10/27/PxToRem&amp;Autoprefixer/"/>
      <url>2020/10/27/PxToRem&amp;Autoprefixer/</url>
      
        <content type="html"><![CDATA[<blockquote><p>问题描述： 插件pxTorem和autoprefixer同时使用的情况下，如果在vue.config.js中不配置autoprefixer，autoprefixer会失效</p></blockquote><h2 id="bug出现背景"><a href="#bug出现背景" class="headerlink" title="bug出现背景"></a>bug出现背景</h2><p>在某个H5的首页，尝试实现如下动画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"theme abs"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/imgs/theme.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"light abs"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.theme</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">527px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">374px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">245</span> / <span class="number">1206</span> * <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">375px</span> + <span class="number">110px</span>;</span><br><span class="line">  <span class="attribute">filter</span>: drop-shadow(<span class="number">5px</span> <span class="number">5px</span> <span class="number">6px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>));</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.light</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">mask</span>: url(<span class="string">"../assets/imgs/theme.png"</span>);</span><br><span class="line">    <span class="attribute">mask-size</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">left</span>: -<span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">background</span>: rgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">      <span class="attribute">background</span>: linear-gradient(</span><br><span class="line">        <span class="number">90deg</span>,</span><br><span class="line">        rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">0%</span>,</span><br><span class="line">        rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">25%</span>,</span><br><span class="line">        rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">50%</span>,</span><br><span class="line">        rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">75%</span>,</span><br><span class="line">        rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">100%</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">&amp;</span><span class="selector-class">.ready</span> &#123;</span><br><span class="line">  <span class="selector-class">.light</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: LightMove <span class="number">1s</span> <span class="number">1.1s</span> ease-in-out forwards;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> LightMove &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: translate3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">50%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: translate3d(<span class="number">200%</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: translate3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动画的确是生效了，但是发现动画有点诡异，和想象中的效果不太一样（只看见一团诡异的白色飘来飘去），然后开始查看DOM元素，但是从调试器看没啥毛病，但是不死心，之前写这动画还是效果很出色的</p><p>然后打开了之前的项目对比代码，代码没区别，打开之前的链接，果然，<code>-webkit-mask-size</code>,<code>-webkit-mask</code>,这两个css属性在本次的代码里没有浏览器前缀</p><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><blockquote><p>pxTorem和autoprefixer同时使用时，autoprefixer失效了</p></blockquote><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      postcss: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">"postcss-pxtorem"</span>)(&#123;</span><br><span class="line">            rootValue: <span class="number">46.875</span>, <span class="comment">// 换算的基数</span></span><br><span class="line">            <span class="comment">// 忽略转换正则匹配项。插件会转化所有的样式的px。比如引入了三方UI，也会被转化。目前我使用 selectorBlackList字段，来过滤</span></span><br><span class="line">            <span class="comment">//如果个别地方不想转化px。可以简单的使用大写的 PX 或 Px 。</span></span><br><span class="line">            <span class="comment">// selectorBlackList: ['weui', 'mu'],</span></span><br><span class="line">            propList: [<span class="string">"*"</span>],</span><br><span class="line">            exclude: <span class="regexp">/node_modules/i</span></span><br><span class="line">          &#125;),</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">"autoprefixer"</span>)(&#123;</span><br><span class="line">            overrideBrowserslist: [</span><br><span class="line">              <span class="string">"Android 4.1"</span>,</span><br><span class="line">              <span class="string">"iOS 7.1"</span>,</span><br><span class="line">              <span class="string">"Chrome &gt; 31"</span>,</span><br><span class="line">              <span class="string">"ff &gt; 31"</span>,</span><br><span class="line">              <span class="string">"ie &gt;= 8"</span></span><br><span class="line">              <span class="comment">//'last 2 versions', // 所有主流浏览器最近2个版本</span></span><br><span class="line">            ],</span><br><span class="line">            grid: <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote><p>插件pxTorem和autoprefixer同时使用的情况下，autoprefixer会失效,需要在vue.config.js中重新配置才能生效</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常小bug集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS适配iPhoneX机型</title>
      <link href="2020/03/27/CSS%E9%80%82%E9%85%8DiPhoneX%E6%9C%BA%E5%9E%8B/"/>
      <url>2020/03/27/CSS%E9%80%82%E9%85%8DiPhoneX%E6%9C%BA%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步：设置网页在可视窗口的布局方式"><a href="#第一步：设置网页在可视窗口的布局方式" class="headerlink" title="第一步：设置网页在可视窗口的布局方式"></a>第一步：设置网页在可视窗口的布局方式</h3><p>新增 viweport-fit 属性，使得页面内容完全覆盖整个窗口：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, viewport-fit=cover"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第二步：页面主体内容限定在安全区域内"><a href="#第二步：页面主体内容限定在安全区域内" class="headerlink" title="第二步：页面主体内容限定在安全区域内"></a>第二步：页面主体内容限定在安全区域内</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三步：fixed-元素的适配"><a href="#第三步：fixed-元素的适配" class="headerlink" title="第三步：fixed 元素的适配"></a>第三步：fixed 元素的适配</h3><h4 id="类型一：fixed-完全吸底元素（bottom-0）"><a href="#类型一：fixed-完全吸底元素（bottom-0）" class="headerlink" title="类型一：fixed 完全吸底元素（bottom = 0）"></a>类型一：fixed 完全吸底元素（bottom = 0）</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(60px(假设值) + <span class="built_in">constant</span>(safe-area-inset-bottom));</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(60px(假设值) + <span class="built_in">env</span>(safe-area-inset-bottom));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，这个方案需要吸底条必须是有背景色的，因为扩展的部分背景是跟随外容器的，否则出现镂空情况。</strong></p><h4 id="类型二：fixed-非完全吸底元素（bottom-≠-0），比如-“返回顶部”、“侧边广告”-等"><a href="#类型二：fixed-非完全吸底元素（bottom-≠-0），比如-“返回顶部”、“侧边广告”-等" class="headerlink" title="类型二：fixed 非完全吸底元素（bottom ≠ 0），比如 “返回顶部”、“侧边广告” 等"></a>类型二：fixed 非完全吸底元素（bottom ≠ 0），比如 “返回顶部”、“侧边广告” 等</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="built_in">calc</span>(50px(假设值) + <span class="built_in">constant</span>(safe-area-inset-bottom));</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="built_in">calc</span>(50px(假设值) + <span class="built_in">env</span>(safe-area-inset-bottom));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript版各大排序算法</title>
      <link href="2020/01/08/Sort/"/>
      <url>2020/01/08/Sort/</url>
      
        <content type="html"><![CDATA[<h1 id="排序算法的设计与实现"><a href="#排序算法的设计与实现" class="headerlink" title="排序算法的设计与实现"></a>排序算法的设计与实现</h1><p>这是一个<a href="https://songjinzhong.github.io/BaiDu_IFE/stage2/task19/" target="_blank" rel="noopener">可视化的排序展示</a>,支持冒泡、插入和选择排序，具体使用先 随机添加40个，然后点排序，就可以看到可视化的效果。<br>推荐一下，<a href="http://math.hws.edu/eck/jsdemo/sortlab.html" target="_blank" rel="noopener">HTML5 Canvas Demo:Sorting Algorithms</a>,这里还有个可视化的<a href="https://coolshell.cn/articles/3933.html" target="_blank" rel="noopener">排序博客</a>，各大排序算法的实现都栩栩如生。</p><p>JavaScript写排序算法主要是参数问题，比如JavaScript算法函数可以扔给Array原型：<code>Array.prototype.sort = function</code>，也可以直接写个函数带参数：<code>function sort(array) {}</code>，哪种方法都一样，需要注意的是兼容性问题，如果可以考虑所有可遍历对象都能排序（比如argument），才大法好！<br>下面的排序都是从小到大的排序：</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序是一种基本排序，它的基本思路是构建有序序列，对于未排序的数据，在已排序的基础上，从右向左（或者二分查找）选择位置插入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_sort</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i, j, temp;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; input.length; i++)&#123;</span><br><span class="line">    temp = input[i];</span><br><span class="line">    <span class="keyword">for</span>(j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span> &amp;&amp; input[j] &gt; temp; j--) &#123;</span><br><span class="line">      input[j+<span class="number">1</span>] = input[j];</span><br><span class="line">    &#125;</span><br><span class="line">    input[j+<span class="number">1</span>] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果以比较次数和移动次数来衡量算法的效率，最好的情况下，比较n-1次，移动0次，最坏情况，比较n<em>(n-1)/2次，移动n</em>(n-1)/2次。</p><h2 id="二分插入排序"><a href="#二分插入排序" class="headerlink" title="二分插入排序"></a>二分插入排序</h2><p>思路基本与插入算法相同，只是在查找插入位置的时候，不是依次查找，而是采用二分法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bin_insert_sort</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i, j, low, mid, high, temp;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">    temp = input[i];</span><br><span class="line">    high = i - <span class="number">1</span>;</span><br><span class="line">    low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high) &#123;</span><br><span class="line">      min = <span class="built_in">parseInt</span>((low + high)/<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span>(temp &lt; input[mid]) &#123;</span><br><span class="line">        high = mid - <span class="number">1</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        low = mid + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// low的位置就是要插入的位置</span></span><br><span class="line">    <span class="keyword">for</span>(j = i - <span class="number">1</span>; j &gt;= low; j--) &#123;</span><br><span class="line">      input[j+<span class="number">1</span>] = input[j]</span><br><span class="line">    &#125;</span><br><span class="line">    input[low] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序其实是加强版的插入排序，就是在原先的插入排序的基础上，加入了步长，原先插入排序的步长是1，而且步长不同，效率也有差异，选择一个合适的步长也很重要。而且，希尔排序的最后一步，也必定是步长为1的插入排序，只不过此时整个排序已经基本稳定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shell_sort</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> gap, i, j, temp;</span><br><span class="line">  gap = input.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(i = gap; i &lt; input.length; i++) &#123;</span><br><span class="line">      temp = input[i];</span><br><span class="line">      <span class="keyword">for</span>(j = i - gap;j &gt;= <span class="number">0</span> &amp;&amp; input[j] &gt; temp; j -= gap) &#123;</span><br><span class="line">        input[j + gap] = input[j];</span><br><span class="line">      &#125;</span><br><span class="line">      input[j + gap] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    gap = gap &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序的工作原理：首先在未排序序列中找到最小（大）元素，存放在排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select_sort</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i, j, min, temp;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; input.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    min = i;</span><br><span class="line">    <span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; input.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(input[min] &gt; input[j]) &#123;</span><br><span class="line">        min = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = input[min];</span><br><span class="line">    input[min] = input[i];</span><br><span class="line">    input[i] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择排序在最好的情况下和最坏的情况下，比较次数是一样的，都是n*(n-1)/2;</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序的原理：对于待排序列，它会遍历多次，每次都会比较相邻的两个元素，若顺序相反，即交换他们。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble_sort</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i, j, temp, flag;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; input.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; input.length - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (input[j] &gt; input[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        temp = input[j];</span><br><span class="line">        input[j] = input[j + <span class="number">1</span>];</span><br><span class="line">        input[j + <span class="number">1</span>] = temp;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有flag时，最好的情况比较n-1次，移动0次，最坏情况，比较n<em>(n-1)/2次，交换n</em>(n-1)/2</p><h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><p>快排的基本思路就是选择一个元素，然后按照与这个元素的比较，将大于这个元素的都拿到右边，小于这个元素的都拿到左边，并找到这个元素的位置这个元素的左右两边递归。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> mid = partition(start, end);</span><br><span class="line">    sort(start, mid - <span class="number">1</span>);</span><br><span class="line">    sort(min + <span class="number">1</span>, end);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> left = start, right = end, key = input[start], temp;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">      <span class="keyword">while</span>(left &lt; right &amp;&amp; input[right] &gt;= key) &#123;</span><br><span class="line">        right--;</span><br><span class="line">      &#125;</span><br><span class="line">      input[left] = input[right];</span><br><span class="line">      <span class="keyword">while</span>(left &lt; right &amp;&amp; input[left] &lt;= key)&#123;</span><br><span class="line">        left++</span><br><span class="line">      &#125;</span><br><span class="line">      input[right] = input[left];</span><br><span class="line">    &#125;</span><br><span class="line">    input[left] = key;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">  &#125;</span><br><span class="line">  sort(<span class="number">0</span>, input.length - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html" target="_blank" rel="noopener">关于快排的详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年总结回顾</title>
      <link href="2020/01/02/Year2019/"/>
      <url>2020/01/02/Year2019/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery总体架构"><a href="#jQuery总体架构" class="headerlink" title="jQuery总体架构"></a>jQuery总体架构</h2><p>jQuery使用上的几大特点</p><ol><li><code>$(&#39;#id&#39;)</code>函数方式直接生成jQuery对象</li><li><code>$(&#39;#id&#39;).css().html().hide()</code>链式调用</li></ol><p>关于链式调用，既在函数结尾<code>return this</code>;</p><h3 id="无new函数的实现"><a href="#无new函数的实现" class="headerlink" title="无new函数的实现"></a>无new函数的实现</h3><p>下面是一个普通的函数，很显然，会陷入死循环；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery();</span><br><span class="line">&#125;</span><br><span class="line">jQuery.prototype = &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>jQuery</code>用一个<code>init</code>函数来代替直接<code>new</code>函数名的方式，还要考虑到<code>jQuery</code>中分离作用域：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery.prototype.init();</span><br><span class="line">&#125;</span><br><span class="line">jQuery.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: jQuery,</span><br><span class="line">  init: function () &#123;</span><br><span class="line">    <span class="keyword">this</span>.jquery = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  jquery: <span class="number">2.0</span>,</span><br><span class="line">  each: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'each'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">jQuery().jquery <span class="comment">//1.0</span></span><br><span class="line">jQuery.prototype.jquery <span class="comment">//2.0</span></span><br><span class="line">jQuery().each <span class="comment">//error</span></span><br></pre></td></tr></table></figure><p>上面的代码看似运行正常，但是问题出在<code>jQuery().each //error</code>，访问不到<code>each</code>函数上。实际上，<code>new jQuery.prototype.init()</code>返回的是<code>init</code>这个函数的实例，所以<code>init</code>函数中的<code>this</code>就没有意义！如果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jq = jQuery();</span><br><span class="line">jq.__proto__ === jQuery.prototype;</span><br><span class="line">jq.each === jQuery.prototype.each;</span><br></pre></td></tr></table></figure><p>如果实现上面的proto的指向问题，原型函数调用问题就解决了，<code>但实际上：</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jq = jQuery();</span><br><span class="line">jq.__proto__ ===jQuery.prototype.init.prototype; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>实际上，jq的proto是指向init函数原型的，所以，我们可以把<code>jQuery.prototype.init.prototype = jQuery.prototype</code>，这个时候，函数调用就顺理成章了，而且使用的都是引用，指向的都是同一个<code>prototype</code>对象</p><h3 id="jQuery内部结构图"><a href="#jQuery内部结构图" class="headerlink" title="jQuery内部结构图"></a>jQuery内部结构图</h3><p><code>jQuery.fn</code>,实际上是prototype的一个引用，指向jQuery.prototype;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery.prototype.init();</span><br><span class="line">&#125;</span><br><span class="line">jQuery.fn = jQuery.prototype &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要用fn指向prototype？一个比较中肯的回答：简洁！你不觉得fn比prototype好写多了么<br>借用网上的一张图：</p><!-- ![jQuery内部结构图](https://user-gold-cdn.xitu.io/2017/2/23/b1c453d8d3b5bddb21cddc15bc1f8af2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1) --><p>从图上可以看出，window对象有两个公共的接口，分别是<code>$</code>和<code>jQuery</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery</span><br></pre></td></tr></table></figure><p><code>jQuery.extend</code>方法是一个对象拷贝的方法，包括深拷贝</p><h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p>实现方式，在没有返回值的原型函数后面添加<code>return this</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Jquery.fn.init();</span><br><span class="line">&#125;</span><br><span class="line">jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: jQuery,</span><br><span class="line">  init: function () &#123;</span><br><span class="line">    <span class="keyword">this</span>.jQuery = <span class="number">3.0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  each: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'each'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">jQuery.fn.init.prototype = jQuery,fn;</span><br><span class="line">jQuery().each().each();</span><br><span class="line"><span class="comment">// 'each'</span></span><br><span class="line"><span class="comment">// 'each'</span></span><br></pre></td></tr></table></figure><h3 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h3><p><code>extend</code>是<code>jQuery</code>的一个重要函数，可以对<code>jQuery</code>本身的属性和方法进行扩张，也可以对原型的属性和方法进行扩展</p><p><code>extend</code>函数的功能：</p><ol><li>如果参数只有一个<code>object</code>,即表示将这个对象扩展到jQuery的命名空间中，也就是所谓的<code>jQuery</code>扩展</li><li>如果函数接受了多个<code>object</code>，则表示一种属性拷贝，将后面多个对象的属性全拷贝到第一个对象上，这其中，还包括深拷贝，即非引用拷贝，第一个参数如果是<code>true</code>，则表示深拷贝。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jQuery.extend(target); <span class="comment">// jQuery的扩展</span></span><br><span class="line">jQuery.extend(target, obj1, obj2,...); <span class="comment">//浅拷贝</span></span><br><span class="line">jQuery.extend(<span class="literal">true</span>, target, obj1, obj2,...) <span class="comment">//深拷贝</span></span><br></pre></td></tr></table></figure></li></ol><p>以下是<code>jQuery 3</code>之后的extend函数源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> options, name, src, copy, copyIsArray, clone,</span><br><span class="line">target = <span class="built_in">arguments</span>[ <span class="number">0</span> ] || &#123;&#125;,</span><br><span class="line">i = <span class="number">1</span>,</span><br><span class="line">length = <span class="built_in">arguments</span>.length,</span><br><span class="line">deep = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle a deep copy situation</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> target === <span class="string">"boolean"</span> ) &#123;</span><br><span class="line">deep = target;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Skip the boolean and the target</span></span><br><span class="line">target = <span class="built_in">arguments</span>[ i ] || &#123;&#125;;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle case when target is a string or something (possible in deep copy)</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> target !== <span class="string">"object"</span> &amp;&amp; !isFunction( target ) ) &#123;</span><br><span class="line">target = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extend jQuery itself if only one argument is passed</span></span><br><span class="line"><span class="keyword">if</span> ( i === length ) &#123;</span><br><span class="line">target = <span class="keyword">this</span>;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( ; i &lt; length; i++ ) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only deal with non-null/undefined values</span></span><br><span class="line"><span class="keyword">if</span> ( ( options = <span class="built_in">arguments</span>[ i ] ) != <span class="literal">null</span> ) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extend the base object</span></span><br><span class="line"><span class="keyword">for</span> ( name <span class="keyword">in</span> options ) &#123;</span><br><span class="line">copy = options[ name ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prevent Object.prototype pollution</span></span><br><span class="line"><span class="comment">// Prevent never-ending loop</span></span><br><span class="line"><span class="keyword">if</span> ( name === <span class="string">"__proto__"</span> || target === copy ) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Recurse if we're merging plain objects or arrays</span></span><br><span class="line"><span class="keyword">if</span> ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject( copy ) ||</span><br><span class="line">( copyIsArray = <span class="built_in">Array</span>.isArray( copy ) ) ) ) &#123;</span><br><span class="line">src = target[ name ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure proper type for the source value</span></span><br><span class="line"><span class="keyword">if</span> ( copyIsArray &amp;&amp; !<span class="built_in">Array</span>.isArray( src ) ) &#123;</span><br><span class="line">clone = [];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( !copyIsArray &amp;&amp; !jQuery.isPlainObject( src ) ) &#123;</span><br><span class="line">clone = &#123;&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">clone = src;</span><br><span class="line">&#125;</span><br><span class="line">copyIsArray = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Never move original objects, clone them</span></span><br><span class="line">target[ name ] = jQuery.extend( deep, clone, copy );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Don't bring in undefined values</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( copy !== <span class="literal">undefined</span> ) &#123;</span><br><span class="line">target[ name ] = copy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the modified object</span></span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="由extend衍生的函数"><a href="#由extend衍生的函数" class="headerlink" title="由extend衍生的函数"></a>由<code>extend</code>衍生的函数</h3><h4 id="jQuery-isFunction源码"><a href="#jQuery-isFunction源码" class="headerlink" title="jQuery.isFunction源码"></a><code>jQuery.isFunction</code>源码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jQuery.ifFunction = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> jQuery.type(obj) === <span class="string">"function"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是简单，但是这里是为了引出涉及到的另一个<code>jQuery</code>函数<code>jQuery.type</code>，这个函数用于类型判断。</p><p>为什么不用原生js的typeof？因为不好用！</p>]]></content>
      
      
      <categories>
          
          <category> 总结回顾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片转base64方法方法汇总</title>
      <link href="2019/10/29/Canvas2Img/"/>
      <url>2019/10/29/Canvas2Img/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery图片转base64方法"><a href="#jQuery图片转base64方法" class="headerlink" title="jQuery图片转base64方法"></a>jQuery图片转base64方法</h2><p>引入fileReader插件<code>filereader.min.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">that.$upload.find(<span class="string">'#uploadFile'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span></span><br><span class="line">        file = <span class="keyword">this</span>.files[<span class="number">0</span>],</span><br><span class="line">        fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> file === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file.type &amp;&amp; !<span class="regexp">/image\/\w+/</span>.test(file.type)) &#123;</span><br><span class="line">        alert(<span class="string">'请上传图片文件'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fileReader.readAsDataURL(file);</span><br><span class="line">    fileReader.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">this</span>.result;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        <span class="keyword">var</span> exif;</span><br><span class="line">        <span class="keyword">var</span> base64 = result.replace(<span class="regexp">/^.*?,/</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">var</span> binary = atob(base64);</span><br><span class="line">        <span class="keyword">var</span> binaryData = <span class="keyword">new</span> BinaryFile(binary);</span><br><span class="line">        exif = EXIF.readFromBinaryFile(binaryData);</span><br><span class="line">        <span class="keyword">var</span> orientation = exif ? exif.Orientation : <span class="number">1</span>;</span><br><span class="line">        cutCanvas.style.display = <span class="string">'block'</span>;</span><br><span class="line">        ctrlLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">        that.$upload.find(<span class="string">'.upload-info'</span>).hide();</span><br><span class="line">        that.$upload.find(<span class="string">'.review'</span>).show();</span><br><span class="line">        that.$upload.find(<span class="string">'.cut-tips'</span>).show();</span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            cutCanvas.getContext(<span class="string">"2d"</span>).setTransform(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> gesturableImg = <span class="keyword">new</span> ImgTouchCanvas(&#123;</span><br><span class="line">                canvas: cutCanvas,</span><br><span class="line">                contrler: ctrlLayer,</span><br><span class="line">                path: img.src,</span><br><span class="line">                imgRoate: orientation</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        that.isUpload = <span class="literal">true</span>;</span><br><span class="line">        img.src = result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="微信小程序图片转base64方法"><a href="#微信小程序图片转base64方法" class="headerlink" title="微信小程序图片转base64方法"></a>微信小程序图片转base64方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传头像</span></span><br><span class="line">uploadImg() &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span></span><br><span class="line">    wx.chooseImage(&#123;</span><br><span class="line">        count: <span class="number">1</span>,</span><br><span class="line">        sizeType: [<span class="string">'compressed'</span>],</span><br><span class="line">        sourceType: [<span class="string">'album'</span>, <span class="string">'camera'</span>],</span><br><span class="line">        success (res) &#123;</span><br><span class="line">        wx.showLoading(&#123;</span><br><span class="line">            title: <span class="string">'上传中…'</span>, <span class="comment">// 提示的内容,</span></span><br><span class="line">            mask: <span class="literal">true</span> <span class="comment">// 显示透明蒙层，防止触摸穿透,</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// tempFilePath可以作为img标签的src属性显示图片</span></span><br><span class="line">        wx.getFileSystemManager().readFile(&#123;</span><br><span class="line">            filePath: res.tempFilePaths[<span class="number">0</span>], <span class="comment">// 选择图片返回的相对路径</span></span><br><span class="line">            encoding: <span class="string">'base64'</span>, <span class="comment">// 编码格式</span></span><br><span class="line">            success: <span class="function"><span class="params">r1</span> =&gt;</span> &#123; <span class="comment">// 成功的回调</span></span><br><span class="line">            <span class="comment">// console.log('data:image/png;base64,' + r1.data)</span></span><br><span class="line">            that.headerUrl = <span class="string">'data:image/png;base64,'</span> + r1.data</span><br><span class="line">            <span class="keyword">let</span> params = &#123;</span><br><span class="line">                code: that.headerUrl</span><br><span class="line">            &#125;</span><br><span class="line">            that.uploadImg(params)</span><br><span class="line">            that.$apply()</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            wx.hideLoading()</span><br><span class="line">            wx.showToast(&#123;</span><br><span class="line">                title: <span class="string">'上传图片失败'</span>,</span><br><span class="line">                icon: <span class="string">'none'</span></span><br><span class="line">            &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常用JS工具代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序使用Redux状态管理</title>
      <link href="2019/10/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8Redux%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>2019/10/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8Redux%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Redux状态管理<br>Redux 是一个前端状态管理的容器，对于构建大型应用，对里面共享数据、状态的管理非常方便<br>wepy 框架本身是支持 Redux 的，我们在构建项目的时候，将是否安装 Redux 选择 y 就好了，会自动安装依赖</p></blockquote><h2 id="入口文件index-js"><a href="#入口文件index-js" class="headerlink" title="入口文件index.js"></a>入口文件index.js</h2><p>入口文件<code>index.js</code>，里面主要是 初始化<code>Redux</code>， 其中<code>promiseMiddleware</code>是一个中间件，方便后面<code>action</code>做异步处理<code>reducers</code>是一个纯函数，用于接受<code>Action</code>和当前<code>State</code>作为参数，返回一个新的<code>State</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> promiseMiddleware <span class="keyword">from</span> <span class="string">'redux-promise'</span></span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">configStore</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> store = createStore(rootReducer, applyMiddleware(promiseMiddleware))</span><br><span class="line">  <span class="keyword">return</span> store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件夹types-reducers-和-actions"><a href="#文件夹types-reducers-和-actions" class="headerlink" title="文件夹types reducers 和 actions"></a>文件夹types reducers 和 actions</h2><p>其中<code>types</code>用于定义我们要触发的<code>action</code>的名称，也就是表示<code>action</code>的名称，这里我定义了<code>counter</code>和<code>list</code>两个<code>types</code></p><h3 id="types"><a href="#types" class="headerlink" title="types"></a>types</h3><h4 id="counter-js"><a href="#counter-js" class="headerlink" title="counter.js"></a>counter.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">'INCREMENT'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">'DECREMENT'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ASYNC_INCREMENT = <span class="string">'ASYNC_INCREMENT'</span></span><br></pre></td></tr></table></figure><h4 id="list-js"><a href="#list-js" class="headerlink" title="list.js"></a>list.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD = <span class="string">'ADD'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REMOVE = <span class="string">'REMOVE'</span></span><br></pre></td></tr></table></figure><p>通过<code>types</code>文件夹的入口文件<code>index.js</code>将他们暴露出去</p><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./counter'</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./list'</span></span><br></pre></td></tr></table></figure><h3 id="reducers"><a href="#reducers" class="headerlink" title="reducers"></a>reducers</h3><p><code>reducers</code>文件件存放我们的纯函数，用来更改我们的状态 ， 他也有一个入口文件<code>index.js</code></p><h4 id="index-js-1"><a href="#index-js-1" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">'./counter'</span></span><br><span class="line"><span class="keyword">import</span> list <span class="keyword">from</span> <span class="string">'./list'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">  counter,</span><br><span class="line">  list</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>首先将<code>counter</code>引入进来，通过<code>redux</code>定义的<code>combineReducers</code>函数，将所有的<code>reducers</code>合并成一个整体，方便我们后面对其进行管理</p><h4 id="counter-js-1"><a href="#counter-js-1" class="headerlink" title="counter.js"></a>counter.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; handleActions &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span></span><br><span class="line"><span class="keyword">import</span> &#123; INCREMENT, DECREMENT, ASYNC_INCREMENT &#125; <span class="keyword">from</span> <span class="string">'../types/counter'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultState  = &#123;</span><br><span class="line">    num: <span class="number">0</span> ,</span><br><span class="line">    asyncNum: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> handleActions(&#123;</span><br><span class="line">  [INCREMENT] (state) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...state,</span><br><span class="line">      num: state.num + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  [DECREMENT] (state) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...state,</span><br><span class="line">      num: state.num - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  [ASYNC_INCREMENT] (state, action) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...state,</span><br><span class="line">      asyncNum: state.asyncNum + action.payload</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, defaultState)</span><br></pre></td></tr></table></figure><p>介绍一下<code>counter.js</code>里面的<code>reducer</code>， 首先引入了<code>handleActions</code>方法用来创建<code>actions</code>， 它将多个相关的<code>reducer</code>写在一起也是 ，方面后期维护，也方便后期通过<code>dispatch</code>来调用他们更改<code>state</code>里面的状态，它主要接收两个参数，第一个参数时候个大对象，里面存放多个<code>reducer</code>， 第二个参数是初始化的时候<code>state</code>的状态值，因此，我们一开始就定义了<code>defaultState</code>;</p><p>接着，我们看看里面的<code>reducer</code>， 分别定义了<code>INCREMENT、 DECREMENT 和 ASYNC_INCREMENT</code>三个<code>reducer</code>，前两个比较简单，分别是对<code>state</code>里面的<code>num</code>值进行加减操作  ， 最后一个是通过<code>action.payload</code>的值来对<code>asyncNum</code>的值进行异步操作的，具体怎么做到的，我们一会再看</p><p><code>list.js</code>里定义的<code>reducer</code>跟上面类似</p><h4 id="list-js-1"><a href="#list-js-1" class="headerlink" title="list.js"></a>list.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; handleActions &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ADD , REMOVE &#125; <span class="keyword">from</span> <span class="string">'../types/list'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultState = [</span><br><span class="line">    &#123;</span><br><span class="line">        title : <span class="string">'吃饭'</span> ,</span><br><span class="line">        text : <span class="string">'今天我要吃火锅'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        title : <span class="string">'工作'</span> ,</span><br><span class="line">        text : <span class="string">'今天我要学习Redux'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> handleActions(&#123;</span><br><span class="line">    [ADD]( state , action )&#123;</span><br><span class="line">        state.push(action.payload)</span><br><span class="line">        <span class="keyword">return</span> [...state]</span><br><span class="line">    &#125;,</span><br><span class="line">    [REMOVE]( state , action )&#123;</span><br><span class="line">        state.splice( action.payload , <span class="number">1</span> );</span><br><span class="line">        <span class="keyword">return</span> [ ...state ]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,defaultState)</span><br></pre></td></tr></table></figure><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><h4 id="index-js-2"><a href="#index-js-2" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./counter'</span></span><br></pre></td></tr></table></figure><h4 id="counter-js-2"><a href="#counter-js-2" class="headerlink" title="counter.js"></a>counter.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ASYNC_INCREMENT &#125; <span class="keyword">from</span> <span class="string">'../types/counter'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createAction &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncInc = createAction(ASYNC_INCREMENT, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里跟<code>reducer</code>里面的要区分，这里是可以对数据进行一系列处理的，我们通过<code>createAction</code>创建一个<code>action</code>, 该方法主要有两个参数，第一个参数<code>type</code>表示<code>action</code>的类型，第二个参数<code>payloadCreator</code>是一个<code>function</code>，处理并返回需要的<code>payload</code>；如果空缺，会使用默认方法。这里是延迟 1s 后返回一个 1</p><p>ok，到此为止，已经基本完成了一个<code>redux</code>的容器,接下来，就是展示它怎么使用的时候了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"wxml"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>同步&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>异步&#123;&#123; asyncNum &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">tap</span>=<span class="string">"increment"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">tap</span>=<span class="string">"decrement"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>减一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">tap</span>=<span class="string">"asyncIncrement"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>异步加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">tap</span>=<span class="string">"addList"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">wx:for-items</span>=<span class="string">"&#123;&#123; todoList &#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">class</span>=<span class="string">"delete"</span> @<span class="attr">tap</span>=<span class="string">"delete(&#123;&#123;index&#125;&#125;)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">'wepy'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'wepy-redux'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123; INCREMENT , DECREMENT &#125; <span class="keyword">from</span> <span class="string">'../store/types/counter'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123; asyncInc &#125; <span class="keyword">from</span> <span class="string">'../store/actions'</span></span></span><br><span class="line"></span><br><span class="line">    @connect(&#123;</span><br><span class="line">        num(state)&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> state.counter.num;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        asyncNum(state)&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> state.counter.asyncNum;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        increment : INCREMENT ,</span><br><span class="line">        decrement : DECREMENT ,</span><br><span class="line">        asyncIncrement : asyncInc</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">page</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line">    components = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    computed = &#123;</span><br><span class="line">        todoList()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> wepy.$store.getState().list;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    methods = &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">delete</span>(index)&#123;</span></span><br><span class="line">            wepy.$store.dispatch(&#123; </span><br><span class="line"><span class="javascript">                type : <span class="string">'REMOVE'</span>, </span></span><br><span class="line">                payload : index</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        addList()&#123;</span><br><span class="line">            wepy.$store.dispatch(&#123; </span><br><span class="line"><span class="javascript">                type : <span class="string">'ADD'</span> , </span></span><br><span class="line">                payload : &#123;</span><br><span class="line"><span class="javascript">                    title : <span class="string">'学习'</span> ,</span></span><br><span class="line"><span class="javascript">                    text : <span class="string">'好好学习'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(wepy.$store.getState())</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line">    text&#123;</span><br><span class="line">        display: block;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin: 10px auto;</span><br><span class="line">    &#125;</span><br><span class="line">    button&#123;</span><br><span class="line">        width: 90%;</span><br><span class="line">        display: block;</span><br><span class="line">        margin: 10px auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.item</span>&#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        text-align: center;</span><br><span class="line">        padding: 0 15px;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span>&#123;</span></span><br><span class="line">            font-size: 14px;</span><br><span class="line">            line-height: 20px;</span><br><span class="line">            margin: 10px auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span>&#123;</span></span><br><span class="line">            font-size: 15px;</span><br><span class="line">            flex: 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.delete</span>&#123;</span></span><br><span class="line">            width: 70px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要看 js 部分，其中<code>import { INCREMENT , DECREMENT } from &#39;../store/types/counter&#39;</code>和<code>import { asyncInc } from &#39;../store/actions&#39;</code>分别表示从<code>counter</code>和<code>actions</code>导出所需的<code>action</code></p><p>我们重点看看 从<code>wepy-redux</code>中 引入的<code>connect</code>，这个<code>connect</code>很关键，它是连接 组件 和 状态 的桥梁，主要用法是<code>@connect(states, actions)</code></p><ul><li><p><code>states</code>: 访问<code>state</code>上的值，可以是数组或者对象，如果是对象的话，则包含的是<code>K-V</code>对<code>V</code>可以是函数还可以是字符串，如果是字符串的话则默认获取<code>state[V]</code>， 否则的话则是使用返回值；而对于如果是数组的话（数组中的项只能为字符串），则认为是相同的<code>K-V</code>对象结构。<code>states</code>最终会附加到组件的<code>computed</code>属性值上。</p></li><li><p><code>actions</code>: 只能传入对象，对象的<code>K-V</code>结构，如果<code>V</code>是字符串的话，则直接会<code>distatch</code>如下的结构:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// args 就是调用传入参数</span></span><br><span class="line">&#123;</span><br><span class="line">    type: val,</span><br><span class="line">    <span class="comment">// 修正一般情况下的参数 一般支持只传一个参数</span></span><br><span class="line">    <span class="comment">// 如果真的是多个参数的话 那么 payload 就是参数组成的数组</span></span><br><span class="line">    payload: args.length &gt; <span class="number">1</span> ? args : args[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果是一个函数<code>fn</code>，则会<code>dispatch(val.apply(store, args))</code>，否则的话则直接<code>dispatch(V)</code></p><p>这里，我们定义的<code>加一</code>、<code>减一</code>和<code>异步加一</code>操作直接映射到<code>INCREMENT、DECREMENT、asyncInc</code>上，也就是相当于直接<code>dispacth</code>对应的操作，对数据进行变更</p><p>当然，我们也可以手动调用容器的<code>dispatch</code>方法对数据进行修改，我们的<code>添加</code>和<code>删除</code>就是这么做的， 点击删除按钮，我们直接<code>dispatch</code>列表中的<code>ADD action</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wepy.$store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'ADD'</span> , <span class="attr">payload</span> : &#123;</span><br><span class="line">    title : <span class="string">'学习'</span> ,</span><br><span class="line">    text : <span class="string">'好好学习'</span></span><br><span class="line">&#125;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微信小程序相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wxapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 常用方法总结</title>
      <link href="2019/08/13/JSLib/"/>
      <url>2019/08/13/JSLib/</url>
      
        <content type="html"><![CDATA[<h2 id="利用a标签自动解析URL分析网址实例"><a href="#利用a标签自动解析URL分析网址实例" class="headerlink" title="利用a标签自动解析URL分析网址实例"></a>利用a标签自动解析URL分析网址实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseURL</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//创建一个a标签</span></span><br><span class="line">  <span class="keyword">var</span> a =  <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  <span class="comment">//将url赋值给标签的href属性。</span></span><br><span class="line">  a.href = url;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    source: url,</span><br><span class="line">    protocol: a.protocol.replace(<span class="string">':'</span>,<span class="string">''</span>), <span class="comment">//协议</span></span><br><span class="line">    host: a.hostname,   <span class="comment">//主机名称</span></span><br><span class="line">    port: a.port,   <span class="comment">//端口</span></span><br><span class="line">    query: a.search,  <span class="comment">//查询字符串</span></span><br><span class="line">    params: (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//查询参数</span></span><br><span class="line">      <span class="keyword">var</span> ret = &#123;&#125;,</span><br><span class="line">          seg = a.search.replace(<span class="regexp">/^\?/</span>,<span class="string">''</span>).split(<span class="string">'&amp;'</span>),</span><br><span class="line">          len = seg.length, i = <span class="number">0</span>, s;</span><br><span class="line">      <span class="keyword">for</span> (;i&lt;len;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!seg[i]) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        s = seg[i].split(<span class="string">'='</span>);</span><br><span class="line">        ret[s[<span class="number">0</span>]] = s[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;)(),</span><br><span class="line">    file: (a.pathname.match(<span class="regexp">/\/([^\/?#]+)$/i</span>) || [,<span class="string">''</span>])[<span class="number">1</span>], <span class="comment">//文件名</span></span><br><span class="line">    hash: a.hash.replace(<span class="string">'#'</span>,<span class="string">''</span>), <span class="comment">//哈希参数</span></span><br><span class="line">    path: a.pathname.replace(<span class="regexp">/^([^\/])/</span>,<span class="string">'/$1'</span>), <span class="comment">//路径</span></span><br><span class="line">    relative: (a.href.match(<span class="regexp">/tps?:\/\/[^\/]+(.+)/</span>) || [,<span class="string">''</span>])[<span class="number">1</span>],  <span class="comment">//相对路径</span></span><br><span class="line">    segments: a.pathname.replace(<span class="regexp">/^\//</span>,<span class="string">''</span>).split(<span class="string">'/'</span>) <span class="comment">//路径片段</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Js获取当前日期时间及其它操作"><a href="#Js获取当前日期时间及其它操作" class="headerlink" title="Js获取当前日期时间及其它操作"></a>Js获取当前日期时间及其它操作</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">myDate.getYear();        <span class="comment">//获取当前年份(2位)</span></span><br><span class="line">myDate.getFullYear();    <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">myDate.getMonth();       <span class="comment">//获取当前月份(0-11,0代表1月)</span></span><br><span class="line">myDate.getDate();        <span class="comment">//获取当前日(1-31)</span></span><br><span class="line">myDate.getDay();         <span class="comment">//获取当前星期X(0-6,0代表星期天)</span></span><br><span class="line">myDate.getTime();        <span class="comment">//获取当前时间(从1970.1.1开始的毫秒数)</span></span><br><span class="line">myDate.getHours();       <span class="comment">//获取当前小时数(0-23)</span></span><br><span class="line">myDate.getMinutes();     <span class="comment">//获取当前分钟数(0-59)</span></span><br><span class="line">myDate.getSeconds();     <span class="comment">//获取当前秒数(0-59)</span></span><br><span class="line">myDate.getMilliseconds();    <span class="comment">//获取当前毫秒数(0-999)</span></span><br><span class="line">myDate.toLocaleDateString();     <span class="comment">//获取当前日期</span></span><br><span class="line"><span class="keyword">var</span> mytime=myDate.toLocaleTimeString();     <span class="comment">//获取当前时间</span></span><br><span class="line">myDate.toLocaleString( );        <span class="comment">//获取日期与时间</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/carekee/articles/1678041.html" target="_blank" rel="noopener">链接地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 常用JS工具代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git相关指令</title>
      <link href="2019/07/01/LearnGit/"/>
      <url>2019/07/01/LearnGit/</url>
      
        <content type="html"><![CDATA[<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/JohnNashs/learngit.git</span><br></pre></td></tr></table></figure><h2 id="克隆指定分支"><a href="#克隆指定分支" class="headerlink" title="克隆指定分支"></a>克隆指定分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b &lt;name&gt; 仓库地址</span><br></pre></td></tr></table></figure><h2 id="Git-状态"><a href="#Git-状态" class="headerlink" title="Git 状态"></a>Git 状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stauts</span><br></pre></td></tr></table></figure><h2 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h2><ul><li>Working Directory 工作区</li><li>Staging Area 暂存区</li><li>Repository 版本库</li></ul><h2 id="精简命令"><a href="#精简命令" class="headerlink" title="精简命令"></a>精简命令</h2><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将代码提交到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将代码提交到当前分支</span></span><br><span class="line">git commit -m <span class="string">"这里是注释"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将代码提交到线上</span></span><br><span class="line">git push origin &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建分支</span></span><br><span class="line">git branch NewBranchName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git chekcout NewBranchName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地检出一个新的分支并推送到远程仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 1.创建并切换分支（创建本地分支）</span></span><br><span class="line">git checkout -b &lt;name&gt;</span><br><span class="line"><span class="comment">## 2.创建并切换分支（创建本地分支）</span></span><br><span class="line">git push --<span class="built_in">set</span>-upstream origin &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将远程git仓库里的指定分支拉取到本地（本地不存在的分支）</span></span><br><span class="line">git checkout -b 本地分支名 origin/远程分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并某支到当前分支</span></span><br><span class="line">git checkout master <span class="comment">#先切换到master</span></span><br><span class="line">git merge NewBranchName <span class="comment">#将NewBranchName合并到当前的分支master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d NewBranchName</span><br></pre></td></tr></table></figure><h3 id="查看log"><a href="#查看log" class="headerlink" title="查看log"></a>查看log</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 commit log</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看操作记录</span></span><br><span class="line">git relog <span class="comment"># git log -g</span></span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回退若干个版本(回退一个 HEAD^, 回退两个版本是 HEAD^^, 三个是 HEAD^^^, 以此类推 )</span></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照版本号回退</span></span><br><span class="line">git reset --hard HEAD~版本号 <span class="comment"># 版本号不需要写全</span></span><br></pre></td></tr></table></figure><h2 id="重置本地账户密码"><a href="#重置本地账户密码" class="headerlink" title="重置本地账户密码"></a>重置本地账户密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system --<span class="built_in">unset</span> credential.helper</span><br></pre></td></tr></table></figure><h2 id="保存账号密码"><a href="#保存账号密码" class="headerlink" title="保存账号密码"></a>保存账号密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><h2 id="删除本地缓存（项目提交后再建gitignore不生效解决方法）"><a href="#删除本地缓存（项目提交后再建gitignore不生效解决方法）" class="headerlink" title="删除本地缓存（项目提交后再建gitignore不生效解决方法）"></a>删除本地缓存（项目提交后再建gitignore不生效解决方法）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>协同开发应建立自己的分支，再合并到master上</p><h2 id="博客发布指令"><a href="#博客发布指令" class="headerlink" title="博客发布指令"></a>博客发布指令</h2><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-Git-%E5%9F%BA%E7%A1%80" target="_blank" rel="noopener">Git官网</a></p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰</a></p>]]></content>
      
      
      <categories>
          
          <category> Git相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取微信小程序码中的参数</title>
      <link href="2019/03/12/%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A0%81%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0/"/>
      <url>2019/03/12/%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A0%81%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/qr-code.html" target="_blank" rel="noopener">获取小程序码</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取小程序码参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取某个url参数的方法</span></span><br><span class="line">getQueryString (name, params) &#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|&amp;)'</span> + name + <span class="string">'=([^&amp;]*)(&amp;|$)'</span>, <span class="string">'i'</span>)</span><br><span class="line">    <span class="comment">// var reg = new RegExp('(' + name + '=)', 'i')</span></span><br><span class="line">    <span class="keyword">var</span> r = params.match(reg)</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(r[<span class="number">2</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line">onLoad (options) &#123;</span><br><span class="line">    <span class="keyword">let</span> that  = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 获取活动id</span></span><br><span class="line">    <span class="keyword">if</span> (options.scene) &#123;</span><br><span class="line">        <span class="comment">// 由于生成的小程序码会把参数都放在scene里面，并且做了urlEncode，所以先要url decode一下</span></span><br><span class="line">        <span class="keyword">var</span> scene = <span class="built_in">decodeURIComponent</span>(options.scene)</span><br><span class="line">        <span class="keyword">var</span> id = <span class="keyword">this</span>.getQueryString(<span class="string">'id'</span>, scene)</span><br><span class="line">        <span class="keyword">if</span> (id) &#123;</span><br><span class="line">            that.actid = id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (options.id) &#123;</span><br><span class="line">            that.actid = options.id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微信小程序相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wxapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Vue生命周期和获取route信息的时机</title>
      <link href="2019/03/12/%E5%85%B3%E4%BA%8EVue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E8%8E%B7%E5%8F%96route%E4%BF%A1%E6%81%AF%E7%9A%84%E6%97%B6%E6%9C%BA/"/>
      <url>2019/03/12/%E5%85%B3%E4%BA%8EVue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E8%8E%B7%E5%8F%96route%E4%BF%A1%E6%81%AF%E7%9A%84%E6%97%B6%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.vue项目直接在组件的<code>mounted</code>生命周期里面获取<code>this.$route</code>信息是获取不到的（第一次刷新，估计是当时vue-router还没有完全加载好），要使用路由信息的话，建议在watch里面监视<code>‘route</code>，然后再做接下去的操作。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    $route: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.realTabData.length; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> item = <span class="keyword">this</span>.realTabData[i];</span><br><span class="line">            <span class="keyword">if</span> (item.route_name == val.name) &#123;</span><br><span class="line">            <span class="keyword">this</span>.active = i;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.vue在computed计算属性里面如果有使用到<code>$refs</code>或者一些DOM的属性方法，会返回underfined并报错（因为这时候dom并没有渲染）<br>解决方法是声明一个状态变量isMounted，在created里面$nextTick事件里面去赋值它为true</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        isMounted:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.isMounted = <span class="literal">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">    tabLineLeft() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isMounted) &#123;</span><br><span class="line">            <span class="comment">//这个时候$refs已变的可用</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">this</span>.active / <span class="keyword">this</span>.realTabData.length) * <span class="keyword">this</span>.$refs.tabBar.clientWidth ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件通讯</title>
      <link href="2019/02/20/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF/"/>
      <url>2019/02/20/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="1-对于父组件向子组件传递信息-可以使用props实现"><a href="#1-对于父组件向子组件传递信息-可以使用props实现" class="headerlink" title="1 对于父组件向子组件传递信息, 可以使用props实现."></a>1 对于父组件向子组件传递信息, 可以使用props实现.</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"radius"</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;borderRadius:radiusNumber+'px'&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">left-right-text</span> <span class="attr">:info</span>=<span class="string">"&#123;text:'子',color:'#fff',bgColor:'red'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">left-right-text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'borderRadius'</span>,</span></span><br><span class="line">    props:&#123;</span><br><span class="line">radiusNum:&#123;</span><br><span class="line"><span class="javascript">type:<span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript"><span class="keyword">default</span>:<span class="number">10</span></span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">       radiusNumber()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">this</span>.$props.radiusNum</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">import</span> BorderRadius <span class="keyword">from</span> <span class="string">"../components/circle.vue"</span></span><br><span class="line">components:&#123;</span><br><span class="line">    TopNav,</span><br><span class="line">    BorderRadius,</span><br><span class="line">    Trident,</span><br><span class="line">    leftRightText</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入变量</span></span><br><span class="line">data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">         rn:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">border-radius</span> <span class="attr">:radius-num</span>=<span class="string">"rn"</span>&gt;</span><span class="tag">&lt;/<span class="name">border-radius</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">        changeBorderRadius()&#123;</span><br><span class="line">            <span class="keyword">this</span>.rn+=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.rn &gt; <span class="number">50</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.rn = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="2-对于子组件向父组件传递信息-使用this-emit在子组件内-触发父组件的自定义事件"><a href="#2-对于子组件向父组件传递信息-使用this-emit在子组件内-触发父组件的自定义事件" class="headerlink" title="2 对于子组件向父组件传递信息, 使用this.$emit在子组件内, 触发父组件的自定义事件."></a>2 对于子组件向父组件传递信息, 使用this.$emit在子组件内, 触发父组件的自定义事件.</h2><blockquote><p>在使用子组件时, 在上面绑定一个自定义事件,事件的名称是eventInParent, 事件处理函数是changeNum.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">border-radius</span> <span class="attr">:radius-num</span>=<span class="string">"rn"</span> @<span class="attr">eventInParent</span>=<span class="string">"changeNum"</span>&gt;</span><span class="tag">&lt;/<span class="name">border-radius</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">changeNum(paramsFromSun, r, evt)&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = evt.offsetX;</span><br><span class="line">    <span class="keyword">this</span>.y = evt.offsetY;</span><br><span class="line">    <span class="keyword">this</span>.num = paramsFromSun;</span><br><span class="line">    <span class="keyword">this</span>.draw(r);</span><br><span class="line">&#125;,</span><br><span class="line">draw(r)&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,ctx.canvas.width,ctx.canvas.height);</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.fillStyle = <span class="string">"red"</span>;</span><br><span class="line">    ctx.arc(<span class="number">50</span>,<span class="number">50</span>,r,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.fill();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>用于显示子组件向父组件传递回来的参数: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"evtCls"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>offsetX: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;x&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">left-right-text</span> <span class="attr">:info</span>=<span class="string">"&#123;text:'父',color:'#fff',bgColor:'#FF00CD'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">left-right-text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>offsetY: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;y&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">left-right-text</span> <span class="attr">:info</span>=<span class="string">"&#123;text:'父',color:'#fff',bgColor:'#FF00CD'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">left-right-text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">left-right-text</span> <span class="attr">:info</span>=<span class="string">"&#123;text:'父',color:'#fff',bgColor:'#FF00CD'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">left-right-text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"radius b"</span> @<span class="attr">click</span>=<span class="string">"changeNumInParent($event)"</span> <span class="attr">:style</span>=<span class="string">"&#123;backgroundColor:bgC&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>点击向父组件传递信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">left-right-text</span> <span class="attr">:info</span>=<span class="string">"&#123;text:'子',color:'#fff',bgColor:'red'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">left-right-text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"radius evtCls"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">left-right-text</span> <span class="attr">:info</span>=<span class="string">"&#123;text:'子',color:'#fff',bgColor:'red'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">left-right-text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>offsetX: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;x&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">left-right-text</span> <span class="attr">:info</span>=<span class="string">"&#123;text:'子',color:'#fff',bgColor:'red'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">left-right-text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>offsetY: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;y&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">changeNumInParent(e)&#123;</span><br><span class="line"><span class="keyword">this</span>.numInSon += <span class="number">10</span>;</span><br><span class="line"><span class="keyword">this</span>.r += <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.r &gt; <span class="number">50</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.r = <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">this</span>.x = e.offsetX;</span><br><span class="line"><span class="keyword">this</span>.y = e.offsetY;</span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">"eventInParent"</span>, <span class="keyword">this</span>.numInSon, <span class="keyword">this</span>.r, e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-对于非父子组件的通讯-可使用eventBus实现"><a href="#3-对于非父子组件的通讯-可使用eventBus实现" class="headerlink" title="3 对于非父子组件的通讯, 可使用eventBus实现."></a>3 对于非父子组件的通讯, 可使用eventBus实现.</h2><blockquote><p>eventBus原理是创建一个空Vue实例, 然后在上面挂载通讯事件, 在挂载事件时, 可以认为这个Vue实例(组件), 是所有组件的父组件, 在触发事件时, 可以认为这个Vue实例, 是所有组件的子组件.</p></blockquote><p>新建一个组件, 在组件元素上绑定点击事件, 用于触发其他组件内的事件.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> @<span class="attr">click</span>=<span class="string">"clickChangeOtherComponentColor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">left-right-text</span> <span class="attr">:info</span>=<span class="string">"&#123;text:'子',color:'#000',bgColor:'#F7E788'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">left-right-text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入事件挂载和触发的载体eventBus;</span></span><br><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">"../utils/eventBus.js"</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>clickChangeOtherComponentColor</code>事件处理函数代码, 以及一个随机产生十六进制颜色值的函数.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sixteen() &#123;</span><br><span class="line">    <span class="keyword">var</span> base = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>];</span><br><span class="line">    <span class="keyword">var</span> baseStr = <span class="string">"#"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">16</span>);</span><br><span class="line">        baseStr += base[r];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> baseStr;</span><br><span class="line">&#125;,</span><br><span class="line">clickChangeOtherComponentColor()&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="keyword">this</span>.sixteen();</span><br><span class="line">    Bus.$emit(<span class="string">"changeColor"</span>, <span class="keyword">this</span>.color);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>Bus.$emit触发了changeColor的事件, 并传入了一个颜色值.<br>那么相应的在其他组件中, 应该有这个changeColor的函数, 并对传入的参数加以利用.<br>在第一个组价内, 导入bus, 并在生命周期的mounted阶段,<br>在bus上挂载一个changeColor的事件.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">"../utils/eventBus.js"</span></span><br><span class="line">mounted()&#123;</span><br><span class="line">    Bus.$on(<span class="string">"changeColor"</span>, (color) =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.bgC = color;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>这个事件将传递过来的颜色, 赋值到本组建的变量bgC上, 而bgC被绑定到一个元素的背景色. 这样就实现, 在trident组件内, 改变 circle组件内元素背景色的效果.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"radius b"</span> @<span class="attr">click</span>=<span class="string">"changeNumInParent($event)"</span> <span class="attr">:style</span>=<span class="string">"&#123;backgroundColor:bgC&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>点击向父组件传递信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">left-right-text</span> <span class="attr">:info</span>=<span class="string">"&#123;text:'子',color:'#fff',bgColor:'red'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">left-right-text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-对于跨路由的组件通讯-需利用路由跳转的参数传递机制"><a href="#4-对于跨路由的组件通讯-需利用路由跳转的参数传递机制" class="headerlink" title="4 对于跨路由的组件通讯, 需利用路由跳转的参数传递机制."></a>4 对于跨路由的组件通讯, 需利用路由跳转的参数传递机制.</h2>]]></content>
      
      
      <categories>
          
          <category> Vue相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css里zoom和scale的区别</title>
      <link href="2019/02/20/css%E9%87%8Czoom%E5%92%8Cscale%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2019/02/20/css%E9%87%8Czoom%E5%92%8Cscale%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><ol><li>zoom的缩放是相对于左上角的；而scale默认是居中缩放；</li><li>zoom的缩放改变了元素占据的空间大小；而scale的缩放占据的原始尺寸不变，页面布局不会发生变化；</li><li>对文字的缩放规则不一致。zoom缩放依然受限于最小12像素中文大小限制；而scale就是纯粹的对图形进行比例控制，文字50%原来尺寸。</li></ol></blockquote><p>移动端自适应的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wr = <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight;</span><br><span class="line">    <span class="keyword">var</span> _width = <span class="number">750</span>;</span><br><span class="line">    <span class="comment">// iphone6截去title栏</span></span><br><span class="line">    <span class="keyword">if</span> (wr &gt; <span class="number">750</span> / <span class="number">1220</span>) &#123;</span><br><span class="line">        _width = <span class="built_in">Math</span>.floor(wr * <span class="number">1220</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _width = <span class="number">750</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Android (\d+\.\d+)/</span>.test(ua)) &#123;</span><br><span class="line">        <span class="keyword">var</span> version = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (version &gt; <span class="number">2.3</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;meta name="viewport" content="width='</span> + _width +</span><br><span class="line">        <span class="string">',user-scalable=no,target-densitydpi=device-dpi,minimal-ui"&gt;'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;meta name="viewport" content="width='</span> + _width +</span><br><span class="line">        <span class="string">',target-densitydpi=device-dpi"&gt;'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/QQAC_Client_iOS/</span>.test(ua)) &#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;meta name="viewport" content="width='</span> + _width +</span><br><span class="line">        <span class="string">',maximum-scale=0.5,minimum-scale=0.5"&gt;'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;meta name="viewport" content="width='</span> + _width +</span><br><span class="line">        <span class="string">',user-scalable=no,target-densitydpi=device-dpi,minimal-ui"&gt;'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用了上述这个就可以使用和设计稿一样的尺寸来写css了<br>但是遇到第三方库的时候（比如弹出层）会出现文字、边框很小，（基本上插件也会用px作为长度单位）<br>解决方法是在第三方库的最顶层加个css：zoom：2；</p></blockquote><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pace</span>&#123;</span><br><span class="line">    <span class="attribute">zoom</span>:<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体差别可查看：<br> <a href="https://www.zhangxinxu.com/study/201511/zoom-scale.html" target="_blank" rel="noopener">https://www.zhangxinxu.com/study/201511/zoom-scale.html</a></p><h3 id="另外一种方法设置-rem"><a href="#另外一种方法设置-rem" class="headerlink" title="另外一种方法设置 rem"></a>另外一种方法设置 rem</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置1rem为100px</span></span><br><span class="line">initpage(); <span class="comment">//根据设备变更字体大小</span></span><br><span class="line">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    initpage();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initpage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> view_width = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>].getBoundingClientRect().width;</span><br><span class="line">    <span class="keyword">var</span> _html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>];</span><br><span class="line">    _html.style.fontSize = (view_width / <span class="number">375</span>) * <span class="number">100</span> + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移动端常见样式设置"><a href="#移动端常见样式设置" class="headerlink" title="移动端常见样式设置"></a>移动端常见样式设置</h3> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">/* ios 手机端 input 框上方有内阴影 */</span></span><br><span class="line"><span class="selector-class">.input</span>&#123;</span><br><span class="line">    <span class="attribute">-webkit-appearance</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改placeholder的样式设置 */</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123; <span class="comment">/* WebKit, Blink, Edge */</span></span><br><span class="line">    <span class="attribute">color</span>:    <span class="number">#909</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:-moz-placeholder</span> &#123; <span class="comment">/* Mozilla Firefox 4 to 18 */</span></span><br><span class="line">   <span class="attribute">color</span>:    <span class="number">#909</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-moz-placeholder</span> &#123; <span class="comment">/* Mozilla Firefox 19+ */</span></span><br><span class="line">   <span class="attribute">color</span>:    <span class="number">#909</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:-ms-input-placeholder</span> &#123; <span class="comment">/* Internet Explorer 10-11 */</span></span><br><span class="line">   <span class="attribute">color</span>:    <span class="number">#909</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 去掉点击区域的边框阴影效果 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="comment">/*关键代码*/</span> <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0); &#125;</span><br></pre></td></tr></table></figure><h3 id="a-hover伪类在ios移动端浏览器内无效的解决方法"><a href="#a-hover伪类在ios移动端浏览器内无效的解决方法" class="headerlink" title="a:hover伪类在ios移动端浏览器内无效的解决方法"></a>a:hover伪类在ios移动端浏览器内无效的解决方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ontouchstart</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常规object对象判断是否为空方法汇总</title>
      <link href="2019/01/16/%E5%B8%B8%E8%A7%84object%E5%AF%B9%E8%B1%A1%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
      <url>2019/01/16/%E5%B8%B8%E8%A7%84object%E5%AF%B9%E8%B1%A1%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">data==<span class="literal">true</span>;<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.将json对象转化为json字符串，再判断该字符串是否为"&#123;&#125;"</span></span><br><span class="line"><span class="keyword">var</span> b = (<span class="built_in">JSON</span>.stringify(data) == <span class="string">"&#123;&#125;"</span>);</span><br><span class="line">alert(b);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.es6的Object.keys()方法</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Object</span>.keys(data);</span><br><span class="line">alert(arr.length == <span class="number">0</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.for in 循环对象判断</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> isEmptyObject = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">alert(isEmptyObject(obj));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.jquery的isEmptyObject方法</span></span><br><span class="line"><span class="comment">//此方法是jquery将2方法(for in)进行封装，使用时需要依赖jquery</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> b = $.isEmptyObject(data);</span><br><span class="line">alert(b);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.Object.getOwnPropertyNames()方法</span></span><br><span class="line"><span class="comment">//此方法是使用Object对象的getOwnPropertyNames方法，获取到对象中的属性名，存到一个数组中，返回数组对象，我们可以通过判断数组的length来判断此对象是否为空</span></span><br><span class="line"><span class="comment">//注意：此方法不兼容ie8，其余浏览器没有测试</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Object</span>.getOwnPropertyNames(data);</span><br><span class="line">alert(arr.length == <span class="number">0</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常用JS工具代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>video标签属性整理</title>
      <link href="2018/10/17/video%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7%E6%95%B4%E7%90%86/"/>
      <url>2018/10/17/video%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="视频内联播放"><a href="#视频内联播放" class="headerlink" title="视频内联播放"></a>视频内联播放</h2><p>在微信浏览器下有效，其他未知</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">preload</span>=<span class="string">"none"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">x5-video-player-type</span>=<span class="string">"h5-page"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">playsinline</span>=<span class="string">"playsinline"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">webkit-playsinline</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这该死的文档还天天换地址！！！！！打开是404的话进<a href="https://x5.tencent.com" target="_blank" rel="noopener">首页</a>找吧；<a href="https://x5.tencent.com/docs/video.html" target="_blank" rel="noopener">TBS腾讯浏览服务文档</a><br><a href="https://blog.csdn.net/joyce_lcy/article/details/81391142" target="_blank" rel="noopener">这文章还可以：H5的视频解决方案(1) —— mobile video内联播放</a><br><a href="https://segmentfault.com/a/1190000008782550" target="_blank" rel="noopener">这篇也不错：神经病啊！——微信同层播放器接(踩)入(坑)总结</a></p><h2 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">autoplay    autoplay    如果出现该属性，则视频在就绪后马上播放。</span><br><span class="line"></span><br><span class="line">controls    controls    如果出现该属性，则向用户显示控件，比如播放按钮。</span><br><span class="line"></span><br><span class="line">height      pixels      设置视频播放器的高度。</span><br><span class="line"></span><br><span class="line">width       pixels      设置视频播放器的宽度。</span><br><span class="line"></span><br><span class="line">loop        loop        如果出现该属性，则循环播放。</span><br><span class="line"></span><br><span class="line">muted       muted       如果出现该属性，视频的音频输出为静音。</span><br><span class="line"></span><br><span class="line">poster      URL         规定视频正在下载时显示的图像，直到用户点击播放按钮。 preload     auto/metadata/none   如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 &quot;autoplay&quot;，则忽略该属性。</span><br><span class="line"></span><br><span class="line">src         URL         要播放的视频的 URL。</span><br></pre></td></tr></table></figure><h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">duration   整个媒体文件的播放时长，以秒为单位。如果无法获取时长，则返回NaN  </span><br><span class="line"></span><br><span class="line">paused     如果媒体文件当前被暂停，则返回true。如果还未开始播放，默认返回true  </span><br><span class="line"></span><br><span class="line">ended      如果媒体文件已经播放完毕，则返回true  </span><br><span class="line"></span><br><span class="line">startTime  返回最早的播放起始时间，一般是0.0，除非是缓冲过的媒体文件，并且一部分内容已经不在缓冲区  </span><br><span class="line"></span><br><span class="line">error      在发生了错误的情况下返回的错误代码  </span><br><span class="line"></span><br><span class="line">currentSrc 以字符串形式返回当前正在播放或已加载的文件。对应于浏览器在source元素中选择的文件</span><br><span class="line"></span><br><span class="line">seeking    如果播放器正在跳到一个新的播放点，那seeking的值为true。</span><br><span class="line"></span><br><span class="line">initialTime  指定了媒体的开始时间，单位为秒</span><br></pre></td></tr></table></figure><h2 id="可读写属性"><a href="#可读写属性" class="headerlink" title="可读写属性"></a>可读写属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">autoplay     将媒体文件设置为创建后自动播放，或者查询是否已设置为autoplay  </span><br><span class="line"></span><br><span class="line">loop         返回是否循环播放，或设置循环播放（或者不循环播放）  </span><br><span class="line"></span><br><span class="line">currentTime  指定了播放器应该跳过播放的时间（单位为秒）。在播放过程中，可设置currentTime属性来进行定点播放。</span><br><span class="line"></span><br><span class="line">controls     显示或隐藏用户控制界面，或者查询用户控制界面当前是否可见  </span><br><span class="line"></span><br><span class="line">volume       在0.0到1.0之间设置音频音量的相对值，或者查询当前音量相对值  </span><br><span class="line"></span><br><span class="line">muted        布尔值，设置静音或者消除静音，或者检测当前是否为静音  </span><br><span class="line"></span><br><span class="line">autobuffer   通知播放器在媒体文件开始播放前，是否惊醒缓冲加载。如果已设置为autoplay，则忽略此特性</span><br><span class="line"></span><br><span class="line">playbackRate  用于指定媒体播放的速度。1.0表示正常速度，大于1则表示“快进”，0~1之间表示“慢放”，负值表示回放。</span><br></pre></td></tr></table></figure><h2 id="三个特殊属性"><a href="#三个特殊属性" class="headerlink" title="三个特殊属性"></a>三个特殊属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">played 返回已经播放的时间段  </span><br><span class="line"></span><br><span class="line">buffered 返回当前已经缓冲的时间段  </span><br><span class="line"></span><br><span class="line">seekable 返回当前播放器需要跳到的时间段</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">loadstart：开始加载音频和视频。  </span><br><span class="line"></span><br><span class="line">durationchange：音频和视频的duration属性（时长）发生变化时触发，即已经知道媒体文件的长度。如果没有指定音频和视频文件，duration属性等于NaN。如果播放流媒体文件，没有明确的结束时间，duration属性等于Inf（Infinity）。  </span><br><span class="line"></span><br><span class="line">loadedmetadata：媒体文件的元数据加载完毕时触发，元数据包括duration（时长）、dimensions（大小，视频独有）和文字轨。  </span><br><span class="line"></span><br><span class="line">loadeddata：媒体文件的第一帧加载完毕时触发，此时整个文件还没有加载完。  </span><br><span class="line"></span><br><span class="line">progress：浏览器正在下载媒体文件，周期性触发。下载信息保存在元素的buffered属性中。  </span><br><span class="line"></span><br><span class="line">canplay：浏览器准备好播放，即使只有几帧，readyState属性变为CAN_PLAY。  </span><br><span class="line"></span><br><span class="line">canplaythrough：浏览器认为可以不缓冲（buffering）播放时触发，即当前下载速度保持不低于播放速度，readyState属性变为CAN_PLAY_THROUGH。</span><br><span class="line"></span><br><span class="line">abort播放中断  </span><br><span class="line"></span><br><span class="line">emptied媒体文件加载后又被清空，比如加载后又调用load方法重新加载。  </span><br><span class="line"></span><br><span class="line">ended播放结束  </span><br><span class="line"></span><br><span class="line">error发生错误。该元素的error属性包含更多信息。  </span><br><span class="line"></span><br><span class="line">pause播放暂停  </span><br><span class="line"></span><br><span class="line">play暂停后重新开始播放  </span><br><span class="line"></span><br><span class="line">playing开始播放，包括第一次播放、暂停后播放、结束后重新播放。  </span><br><span class="line"></span><br><span class="line">ratechange播放速率改变  </span><br><span class="line"></span><br><span class="line">seeked搜索操作结束  </span><br><span class="line"></span><br><span class="line">seeking搜索操作开始  </span><br><span class="line"></span><br><span class="line">stalled浏览器开始尝试读取媒体文件，但是没有如预期那样获取数据  </span><br><span class="line"></span><br><span class="line">suspend加载文件停止，有可能是播放结束，也有可能是其他原因的暂停  </span><br><span class="line"></span><br><span class="line">timeupdate网页元素的currentTime属性改变时触发。  </span><br><span class="line"></span><br><span class="line">volumechange音量改变时触发（包括静音）。  </span><br><span class="line"></span><br><span class="line">waiting由于另一个操作（比如搜索）还没有结束，导致当前操作（比如播放）不得不等待。</span><br></pre></td></tr></table></figure><h2 id="html5–移动端视频video的android兼容，去除播放控件、全屏等"><a href="#html5–移动端视频video的android兼容，去除播放控件、全屏等" class="headerlink" title="html5–移动端视频video的android兼容，去除播放控件、全屏等"></a>html5–移动端视频video的android兼容，去除播放控件、全屏等</h2><p><a href="https://segmentfault.com/a/1190000006857675" target="_blank" rel="noopener">查看相关文章</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
