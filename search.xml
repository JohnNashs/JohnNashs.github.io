<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Gulp与Node版本不兼容</title>
      <link href="2021/05/17/Gulp%E4%B8%8ENode%E7%89%88%E6%9C%AC%E4%B8%8D%E5%85%BC%E5%AE%B9/"/>
      <url>2021/05/17/Gulp%E4%B8%8ENode%E7%89%88%E6%9C%AC%E4%B8%8D%E5%85%BC%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>之前使用的node版本一直是v8.x.x，最近升级了node版本，为v14.16.0，然后在运行之前Gulp搭建的项目的时候，发现跑不起来，报错如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fs.js:45</span><br><span class="line">&#125; = primordials;</span><br><span class="line">    ^</span><br><span class="line"></span><br><span class="line">ReferenceError: primordials is not defined</span><br><span class="line">    at fs.js:45:5</span><br><span class="line">    at req_ (/Users/fuyumin/Desktop/dz_project/gulp-project/hongchuan/node_modules/natives/index.js:143:24)</span><br><span class="line">    at Object.req [as require] (/Users/fuyumin/Desktop/dz_project/gulp-project/hongchuan/node_modules/natives/index.js:55:10)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/fuyumin/Desktop/dz_project/gulp-project/hongchuan/node_modules/graceful-fs/fs.js:1:37)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:1063:30)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:928:32)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:769:14)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:952:19)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:88:18)</span><br></pre></td></tr></table></figure><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>我本地项目的Gulp版本如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CLI version: 2.2.0</span><br><span class="line">Local version: 3.9.1</span><br></pre></td></tr></table></figure><p><a href="mailto:Gulp@3.x.x" target="_blank" rel="noopener">Gulp@3.x.x</a>与当前<a href="mailto:Node@14.x.x" target="_blank" rel="noopener">Node@14.x.x</a>版本不兼容，官网的建议是Node版本退回到v12.x.x以下（或者升级到<a href="mailto:Gulp@4.x.x" target="_blank" rel="noopener">Gulp@4.x.x</a>），那我哪能接受，毕竟我已经不靠Gulp吃饭了😄，于是开始寻找其他解决方式，终于，在我强大的英语阅读能力下，找到了一篇<a href="https://ourcodeworld.com/articles/read/1188/how-to-solve-gulp-exception-reference-error-primordials-is-not-defined-error" target="_blank" rel="noopener">一分钟解决你的gulp问题</a>，不过现在好像打不开了，还是得靠自己</p><h2 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h2><p>首先删除node依赖node_modules，删的渣都不要剩，然后在根目录下新建一个<code>npm-shrinkwrap.json</code>文件，配置如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"graceful-fs"</span>: &#123;</span><br><span class="line">        <span class="attr">"version"</span>: <span class="string">"4.2.2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下一步，常规操作，<code>npm install</code>，然后启动Gulp项目，我的启动命令是<code>gulp serve</code>，你会发现项目神奇般的又跑起来了(其实也没啥神奇的)！</p><h2 id="npm-shrinkwrap-json"><a href="#npm-shrinkwrap-json" class="headerlink" title="npm-shrinkwrap.json"></a>npm-shrinkwrap.json</h2><p>有关<code>npm-shrinkwrap.json</code>文件的作用，我给你们放这了，自己瞅瞅吧！</p><p><a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-lock-json" target="_blank" rel="noopener">package-lock.json | npm Docs</a><br><a href="https://juejin.cn/post/6844903797668462605" target="_blank" rel="noopener">对npm包精准控制之npm-shrinkwrap.json与package-lock.json</a></p><h2 id="END"><a href="#END" class="headerlink" title="END!"></a>END!</h2>]]></content>
      
      
      <categories>
          
          <category> 日常小bug集合 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试相关</title>
      <link href="2020/11/05/Interview/"/>
      <url>2020/11/05/Interview/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack相关问题。"><a href="#webpack相关问题。" class="headerlink" title="webpack相关问题。"></a>webpack相关问题。</h2><ol><li>webpack的构建流程</li><li>plugins和loader的区别</li><li>webpack构建优化方式有哪些</li><li>webpack的分包策略</li></ol><h2 id="JavaScript的一些面试题"><a href="#JavaScript的一些面试题" class="headerlink" title="JavaScript的一些面试题"></a>JavaScript的一些面试题</h2><ol><li>promise</li><li>async/await原理</li><li>手写订阅发布模式</li><li>bind原理</li><li>new原理</li></ol><h2 id="网络相关问题"><a href="#网络相关问题" class="headerlink" title="网络相关问题"></a>网络相关问题</h2><ol><li>状态码</li><li>http协议中的缓存控制</li><li>keep-alive和多路复用的区别</li><li>http2.0的特性</li><li>头部压缩原理</li><li>tcp握手</li><li>udp和tcp区别</li><li>dns原理</li><li>https原理</li></ol><h2 id="浏览器相关问题"><a href="#浏览器相关问题" class="headerlink" title="浏览器相关问题"></a>浏览器相关问题</h2><ol><li>eventLoop</li><li>关键渲染路径</li><li>加载原理</li><li>DOM树和渲染树区别</li><li>回流和重绘</li></ol><h2 id="性能优化相关问题"><a href="#性能优化相关问题" class="headerlink" title="性能优化相关问题"></a>性能优化相关问题</h2><ol><li>白屏优化方案</li><li>长列表优化方案</li></ol><h2 id="Node相关问题"><a href="#Node相关问题" class="headerlink" title="Node相关问题"></a>Node相关问题</h2><ol><li>egg了解吗</li><li>洋葱模型</li><li>node的eventLoop和浏览器的区别</li><li>如何保证node的高可用，容灾等措施</li><li>node如何发布</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3新特性</title>
      <link href="2020/11/04/Vue2VsVue3/"/>
      <url>2020/11/04/Vue2VsVue3/</url>
      
        <content type="html"><![CDATA[<p>总结一下vue3.0带来的部分新特性</p><ol><li>setup()</li><li>ref()</li><li>reactive()</li><li>isRef()</li><li>toRefs()</li><li>computed()</li><li>watch()</li><li>LifeCycle Hooks(新的生命周期)</li><li>Template refs</li><li>globalProperties</li><li>Suspense</li></ol><h2 id="vue2与vue3的对比"><a href="#vue2与vue3的对比" class="headerlink" title="vue2与vue3的对比"></a>vue2与vue3的对比</h2><ul><li>对TypeScript支持不友好（所有属性都放在了this对象上，难以推到组件的数据类型）</li><li>大量的Api挂载在Vue对象的原型上，难以实现TreeShaking</li><li>架构层面对跨平台dom渲染开发支持不友好</li><li>Composition Api 受ReactHock启发</li><li>更方便的支持了jsx</li><li>vue3的Template支持多个根标签， vue2不支持</li><li>对虚拟DOM进行了重写，对模板的编译进行了优化操作</li></ul><h2 id="一、setup函数"><a href="#一、setup函数" class="headerlink" title="一、setup函数"></a>一、setup函数</h2><p>setup()函数是vue3中，专门为为组件提供的新属性。它为我们使用vue3的Composition Api新特性提供了统一的入口，setup函数会在beforecreate之后、create之前执行，vue3也是取消了这两个钩子，统一用setup代替，该函数相当于一个生命周期函数，vue中过去的data，methods，watch等全部都用对应的新增api写在setup()函数中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setup(props, context) &#123;</span><br><span class="line">  context.attrs</span><br><span class="line">  context.slots</span><br><span class="line">  context.parent</span><br><span class="line">  context.root</span><br><span class="line">  comtext.emit</span><br><span class="line">  comtext.refs</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>props: 用来接收props数据</li><li>context用来定义上下文，上下文对象中包含了一些有用的属性，这些属性在vue2.x中需要通过this才能访问到，在setup函数中无法访问到this，是个undefinded</li><li>返回值：return{}, 返回响应式数据，模板中需要使用的函数</li></ul><h2 id="二、reactive函数"><a href="#二、reactive函数" class="headerlink" title="二、reactive函数"></a>二、reactive函数</h2><p>reactive()函数接收一个普通对象，返回一个响应式的数据对象，想要使用创建的响应式数据也很简单，创建出来之后，在setup()中return出去，直接在template中调用即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"tx"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, ref, toRefs &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">    setup(props, context) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">'test'</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> state</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、ref-函数"><a href="#三、ref-函数" class="headerlink" title="三、ref()函数"></a>三、ref()函数</h2><p>ref()函数用来根据给定的值创建一个响应式的数据对象，ref()函数调用的返回值是一个对象，这个对象只包含了一个value属性，只在setup()函数内部访问ref函数需要加.value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125; //10</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">  setup() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> count = ref&lt;number&gt;(<span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 在js中获取ref中定义的值，需要通过value属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(count.value);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在reactive对象中访问ref创建的创建的响应式数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125; -&#123;&#123; t &#125;&#125; //10 -100</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;defineComponent, reactive, ref, toRefs&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">  setup() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> count = ref&lt;number&gt;(<span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> obj = reactive(&#123;</span></span><br><span class="line">      t: 100,</span><br><span class="line">      count</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// 通过reactive来获取ref的值时，不需要使用.valte属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj.count);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      ...toRefs(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、isRef-函数"><a href="#四、isRef-函数" class="headerlink" title="四、isRef()函数"></a>四、isRef()函数</h2><p>isRef()用来判断某个值是否为ref()创建出来的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, isRef, ref &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">let</span> state = reactive(&#123;</span><br><span class="line">      name: <span class="string">'test'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> age = ref(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、toRefs-函数"><a href="#五、toRefs-函数" class="headerlink" title="五、toRefs()函数"></a>五、toRefs()函数</h2><p>toRefs()函数可以将reactive创建出来的响应式对象，转换为普通对象，只不过这个对象上的每一个节点，都是ref()类型的响应式数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    &#123;&#123; name &#125;&#125; // test</span><br><span class="line">    &#123;&#123; age &#125;&#125; // 18</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; defineComponent, reactive, ref, toRefs &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state =  reactive(&#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'test'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> age = ref(<span class="number">18</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      ...toRefs(states),</span><br><span class="line">      age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、computed"><a href="#六、computed" class="headerlink" title="六、computed()"></a>六、computed()</h2><p>该函数用来创造计算属性，和过去一样，它的返回值是一个ref对象。里面可以传方法，或者一个对象，对象中包含set()、get()方法</p><h3 id="6-1-创建只读的计算属性"><a href="#6-1-创建只读的计算属性" class="headerlink" title="6.1 创建只读的计算属性"></a>6.1 创建只读的计算属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;scripr lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;computed, defineComponent, ref&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line">expoet <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据age的值，创建一个响应式的计算属性readOnlyAge，它会根据依赖的ref自动计算并返回一个新的ref</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> readOnlyAge = computed(<span class="function"><span class="params">()</span> =&gt;</span> age.value++) <span class="comment">// 19</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      age,</span><br><span class="line">      readOnlyAge</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/scripr&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-通过set-、get-方法创建一个可读可写的计算属性"><a href="#6-2-通过set-、get-方法创建一个可读可写的计算属性" class="headerlink" title="6.2 通过set()、get()方法创建一个可读可写的计算属性"></a>6.2 通过set()、get()方法创建一个可读可写的计算属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;computed, defineComponent, ref&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref&lt;number&gt;(<span class="number">18</span>)</span><br><span class="line">    <span class="keyword">const</span> computedAge = computed(&#123;</span><br><span class="line">      <span class="keyword">get</span>: () =&gt; age.value + 1,</span><br><span class="line">      <span class="keyword">set</span>: () =&gt; age.value + value</span><br><span class="line">    &#125;)</span><br><span class="line">    // 为计算属性赋值的操作，会触发<span class="keyword">set</span>函数，触发<span class="keyword">set</span>函数后，age的值会被更新</span><br><span class="line">    age.value = 100;</span><br><span class="line">    return &#123;</span><br><span class="line">      age,</span><br><span class="line">      computedAge</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、watch-函数"><a href="#七、watch-函数" class="headerlink" title="七、watch()函数"></a>七、watch()函数</h2><p>whatch函数用来监听特定的数据源，并在回调函数中执行副作用。默认情况是懒执行的，也就是说再侦听的数据源变更时才执行回调。</p><h3 id="7-1监听用reactive声明的数据源"><a href="#7-1监听用reactive声明的数据源" class="headerlink" title="7.1监听用reactive声明的数据源"></a>7.1监听用reactive声明的数据源</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; computed, definComponent, reactive, toRefs, watch &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive&lt;Person&gt;(&#123; <span class="attr">name</span>: <span class="string">'vue'</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;);</span><br><span class="line"></span><br><span class="line">    watch(</span><br><span class="line">      () =&gt; state.age,</span><br><span class="line">      (age, preAge) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(age); <span class="comment">// 100</span></span><br><span class="line">        <span class="built_in">console</span>.log(preAge); <span class="comment">// 10</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 修改age时会触发watch的回调，打印变更前后的值</span></span><br><span class="line">    state.age = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...toRefs(state)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2监听用ref声明的数据源"><a href="#7-2监听用ref声明的数据源" class="headerlink" title="7.2监听用ref声明的数据源"></a>7.2监听用ref声明的数据源</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref, watch &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line">interface Person &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  age: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref&lt;number&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    watch(age, () =&gt; <span class="built_in">console</span>.log(age.value)); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改age时会触发watch的回调，打印变更后的值</span></span><br><span class="line">    age.value = <span class="number">100</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3同时监听多个值"><a href="#7-3同时监听多个值" class="headerlink" title="7.3同时监听多个值"></a>7.3同时监听多个值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; watch, computed, defineComponent, reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line">interface Person &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  age: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineCompontent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive&lt;Person&gt;(&#123; <span class="attr">name</span>: <span class="string">'vue'</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;);</span><br><span class="line"></span><br><span class="line">    watch(</span><br><span class="line">      [<span class="function"><span class="params">()</span> =&gt;</span> state.age, () =&gt; state.name],</span><br><span class="line">      ([newName, newAge], [oldName, oldAge]) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newName);</span><br><span class="line">        <span class="built_in">console</span>.log(newAge);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(oldName);</span><br><span class="line">        <span class="built_in">console</span>.log(oldAge);</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 修改age时会触发watch的回调，打印变更前后的值，此时需要注意，更改其中一个值，都会执行watch的回调</span></span><br><span class="line">    state.age = <span class="number">100</span></span><br><span class="line">    state.name = <span class="string">'vue3'</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...toRefs(state)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-4-stop停止监听"><a href="#7-4-stop停止监听" class="headerlink" title="7.4 stop停止监听"></a>7.4 stop停止监听</h3><p>在setup()函数内创建的watch监视，会在当前组件被销毁的时候自动停止。如果想要明确的停止某个监视，可以调用watch()函数的返回值即可，语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">set</span> &#125; 'lodash';</span><br><span class="line">import &#123; computed, defineComponent, reactive, toRefs, watch &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line">interface Person &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  age: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive&lt;Person&gt;(&#123; <span class="attr">name</span>: <span class="string">'vue'</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> stop = watch(</span><br><span class="line">      [<span class="function"><span class="params">()</span> =&gt;</span> stage.age, () =&gt; state.name],</span><br><span class="line">      ([newName, newAge],[oldName, oldAge]) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newName);</span><br><span class="line">        <span class="built_in">console</span>.log(newAge);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(oldName);</span><br><span class="line">        <span class="built_in">console</span>.log(oldAge);</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 修改age时会触发watch的回调， 打印变更前后的值，此时需要注意，更改其中一个值，都会执行watch的回调</span></span><br><span class="line">    state.age = <span class="number">100</span>;</span><br><span class="line">    state.name = <span class="string">'vue3'</span></span><br><span class="line"></span><br><span class="line">    setTimeOut(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      stop()</span><br><span class="line">      <span class="comment">// 此时修改时，不会触发watch回调</span></span><br><span class="line">      state.age = <span class="number">1000</span></span><br><span class="line">      state.name = <span class="string">'vue3-'</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)<span class="comment">// 1秒后取消watch的监听</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...toRefs(state)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、lifeCycle-Hooks（新的生命后期）"><a href="#八、lifeCycle-Hooks（新的生命后期）" class="headerlink" title="八、lifeCycle Hooks（新的生命后期）"></a>八、lifeCycle Hooks（新的生命后期）</h2><p>新版的生命周期函数，可以按需导入到组件中，且只能在setup()函数中使用，但是也可以在srtup外定义，在setup中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">set</span> &#125; from 'lodash';</span><br><span class="line">import &#123; defineComponent, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onErrorCaptured, onMounted, onUnMounted, onUpdate &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    onBeforeMount(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'beformounted!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'mounted!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onBeforeUpdate(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'beforupdated!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUpdated(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'updated!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onBeforeUnmount(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'beforunmounted!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUnmounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'unmounted!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onErrorCaptured(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'errorCaptured!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="九、Template-refs"><a href="#九、Template-refs" class="headerlink" title="九、Template refs"></a>九、Template refs</h2><p>通过refs来获取真实的dom元素，这个和react的用法一样，为了获得对模板内元素或组件实例的引用，我们可以像往常一样在setup()中声明一个ref并返回它</p><ol><li>还是跟往常一样，在html中写入ref的名称</li><li>在setup中定义一个ref</li><li>setup中返回ref的实例</li><li>onMounted中可以得到ref的RefImpl的对象，通过.value</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 第一步：还是跟往常一样，在html中写入ref的名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span> <span class="attr">ref</span>=<span class="string">"elmRefs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; <span class="keyword">set</span> &#125; from 'lodash';</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; defineComponent, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 获取真实dom</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> elmRefs = ref&lt;<span class="literal">null</span> | HTMLElement&gt;(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">    onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(elmRefs.value); <span class="comment">// 得到一个 RefImpl 的对象，通过.value访问到数据</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      elmRefs</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十、vue的全局配置"><a href="#十、vue的全局配置" class="headerlink" title="十、vue的全局配置"></a>十、vue的全局配置</h2><p>通过vue实例上config来配置，包含Vue应用程序全局配置的对象。您可以在挂载应用之前修改下面列出的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.config = &#123;...&#125;</span><br></pre></td></tr></table></figure><p>为组件渲染功能和观察程序期间的未捕获错误分配处理程序。错误和应用程序实例将调用处理程序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config.errorHandle = <span class="function">(<span class="params">err, vm, info</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>可以在应用程序内的任何组件实例中访问的全局属性，组件的属性将具有优先权。这可以代替Vue2.X Vue.prototype扩展：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line">app.config.globalProperties.$http = <span class="string">'xxxxxxxxxs'</span></span><br></pre></td></tr></table></figure><p>可以在组件中通过getCurrentInstance()来获取全局globalProperties中配置的信息，getCurrentInstance方法获取当前组件的实例，然后通过ctx属性获得当前上下文，这样我们就能在setup中使用router和vuex，通过这个属性我们就可以操作变量、全局属性、组件属性等等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setup() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; ctx &#125; = getCurrentInstance();</span><br><span class="line">  ctx.$http</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、Suspense组件"><a href="#十一、Suspense组件" class="headerlink" title="十一、Suspense组件"></a>十一、Suspense组件</h2><p>在介绍Vue的Suspense组件之前，我们又必要先了解下React的Suspense组件，因为他们的功能类似。</p><p>React.lazy接受一个函数，这个函数需要动态调用import()。它必须返回一个Promise，该Promise需要resolve一个default export的React组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Suspense &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">const</span> myComponent = React.lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Component'</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;myComponent /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/Suspense&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue3也新增了类似功能的defineAsyncComponent函数，处理动态引入（的组件）。defineAsyncComponent可以接受返回承诺的工厂函数。当您从服务器检索到组件定义时，应该调用Promise的解析回调。您还可以调用reject(reason)来指示负载已经失败</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AsyncComp = defineAsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./components/AsyncComponent.vue'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.component(<span class="string">'async-component'</span>, AsyncComp)</span><br></pre></td></tr></table></figure><p>Vue3也新增了Suspense组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; defineComponent, defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> MyComponent = defineAsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Component'</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    MyComponent</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十二、vue3-x完整组件模板结构"><a href="#十二、vue3-x完整组件模板结构" class="headerlink" title="十二、vue3.x完整组件模板结构"></a>十二、vue3.x完整组件模板结构</h2><p>一个完整的vue3.x完整组件模板结构包含了：组件名称、props、components、setup(hooks、computed、watch、methods等)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mine"</span> <span class="attr">ref</span>=<span class="string">"elmRefs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>测试按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; computed, defineComponent, getCurrentInstance, onMounted, PropType, reactive, ref, toRefs &#125; <span class="keyword">from</span> <span class="string">"vue"</span> ;</span></span><br><span class="line"></span><br><span class="line">interface IState &#123;</span><br><span class="line">  count: 0,</span><br><span class="line"><span class="javascript">  name: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">  list: <span class="built_in">Array</span>&lt;object&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'demo'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 父组件传子组件参数</span></span></span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span> <span class="keyword">as</span> PropType&lt;<span class="literal">null</span> | <span class="string">''</span>&gt;,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">'vue3.x'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    list: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Array</span> <span class="keyword">as</span> PropType&lt;object[]&gt;,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> []</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// TODO 组件注册</span></span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  emits:[<span class="string">"emits-name"</span>], <span class="comment">// 为了提示作用</span></span></span><br><span class="line">  setup (props, context) &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(props.name)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(props.list)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> state = reactive&lt;IState&gt;(&#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'vue 3.0组件'</span>,</span></span><br><span class="line">      count: 0,</span><br><span class="line">      list: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          name: <span class="string">'vue'</span>,</span></span><br><span class="line">          id: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          name: <span class="string">'vuex'</span>,</span></span><br><span class="line">          id: 2</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> a = computed(<span class="function"><span class="params">()</span> =&gt;</span> state.name)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      state.count++</span><br><span class="line"><span class="javascript">      <span class="comment">// 调用父组件方法</span></span></span><br><span class="line"><span class="javascript">      context.emit(<span class="string">'emits-name'</span>, state.count)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reutrn &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      handleClick</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue3的生态"><a href="#vue3的生态" class="headerlink" title="vue3的生态"></a>vue3的生态</h2><ul><li>官网</li><li>源码</li><li>vite 构建器</li><li><a href="https://cli.vuejs.org/" target="_blank" rel="noopener">脚手架</a></li><li>vue-route-next</li><li>vuex4.0</li></ul><p>UI组件库</p><ul><li>vant2.x</li><li>Ant Design of Vue 2.x</li><li>element-plus</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IOS中new Date(&#39;2020-10-28 00:00:00&#39;)显示为NAN</title>
      <link href="2020/10/28/IOSDateBug/"/>
      <url>2020/10/28/IOSDateBug/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在IOS端中，使用如下方法会获得NaN，安卓手机则是正常计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-10-28 00:00:00'</span>).getTime()</span><br></pre></td></tr></table></figure><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="string">'2019/02/26 18:34:33'</span>.replace(<span class="regexp">/-/g</span>,<span class="string">"/"</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(date).getTime()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020/10/28 00:00:00'</span>).getTime()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常小bug集合 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IOS13之后浏览器获取动作与方向需要用户授权</title>
      <link href="2020/10/28/DeviceMotionEvent/"/>
      <url>2020/10/28/DeviceMotionEvent/</url>
      
        <content type="html"><![CDATA[<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><blockquote><p>通过点击事件，触发用户主动授权</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(Android)/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> (<span class="built_in">window</span>.DeviceMotionEvent) !== <span class="string">"undefined"</span> &amp;&amp; <span class="keyword">typeof</span> (<span class="built_in">window</span>.DeviceMotionEvent.requestPermission) === <span class="string">"function"</span>) &#123;</span><br><span class="line">      <span class="comment">// (optional) Do something before API request prompt.</span></span><br><span class="line">      <span class="built_in">window</span>.DeviceMotionEvent.requestPermission().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// (optional) Do something after API prompt dismissed.</span></span><br><span class="line">          <span class="keyword">if</span> (response == <span class="string">"granted"</span>) &#123;</span><br><span class="line">              <span class="comment">// window.addEventListener("devicemotion", (e) =&gt; &#123;</span></span><br><span class="line">              <span class="comment">//     // do something for 'e' here.</span></span><br><span class="line">              <span class="comment">// &#125;)</span></span><br><span class="line">              <span class="built_in">window</span>.addEventListener(<span class="string">'devicemotion'</span>, <span class="literal">false</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              alert(<span class="string">'您的手机不支持摇一摇ヾ(◍°∇°◍)ﾉﾞ'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote><p>通过一些交互，引导用户触发浏览器获取动作与方向的授权，在用户同意授权之后，再执行相关操作</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常小bug集合 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 常用方法总结</title>
      <link href="2019/08/13/JSLib/"/>
      <url>2019/08/13/JSLib/</url>
      
        <content type="html"><![CDATA[<h2 id="利用a标签自动解析URL分析网址实例"><a href="#利用a标签自动解析URL分析网址实例" class="headerlink" title="利用a标签自动解析URL分析网址实例"></a>利用a标签自动解析URL分析网址实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseURL</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//创建一个a标签</span></span><br><span class="line">  <span class="keyword">var</span> a =  <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  <span class="comment">//将url赋值给标签的href属性。</span></span><br><span class="line">  a.href = url;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    source: url,</span><br><span class="line">    protocol: a.protocol.replace(<span class="string">':'</span>,<span class="string">''</span>), <span class="comment">//协议</span></span><br><span class="line">    host: a.hostname,   <span class="comment">//主机名称</span></span><br><span class="line">    port: a.port,   <span class="comment">//端口</span></span><br><span class="line">    query: a.search,  <span class="comment">//查询字符串</span></span><br><span class="line">    params: (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//查询参数</span></span><br><span class="line">      <span class="keyword">var</span> ret = &#123;&#125;,</span><br><span class="line">          seg = a.search.replace(<span class="regexp">/^\?/</span>,<span class="string">''</span>).split(<span class="string">'&amp;'</span>),</span><br><span class="line">          len = seg.length, i = <span class="number">0</span>, s;</span><br><span class="line">      <span class="keyword">for</span> (;i&lt;len;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!seg[i]) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        s = seg[i].split(<span class="string">'='</span>);</span><br><span class="line">        ret[s[<span class="number">0</span>]] = s[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;)(),</span><br><span class="line">    file: (a.pathname.match(<span class="regexp">/\/([^\/?#]+)$/i</span>) || [,<span class="string">''</span>])[<span class="number">1</span>], <span class="comment">//文件名</span></span><br><span class="line">    hash: a.hash.replace(<span class="string">'#'</span>,<span class="string">''</span>), <span class="comment">//哈希参数</span></span><br><span class="line">    path: a.pathname.replace(<span class="regexp">/^([^\/])/</span>,<span class="string">'/$1'</span>), <span class="comment">//路径</span></span><br><span class="line">    relative: (a.href.match(<span class="regexp">/tps?:\/\/[^\/]+(.+)/</span>) || [,<span class="string">''</span>])[<span class="number">1</span>],  <span class="comment">//相对路径</span></span><br><span class="line">    segments: a.pathname.replace(<span class="regexp">/^\//</span>,<span class="string">''</span>).split(<span class="string">'/'</span>) <span class="comment">//路径片段</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Js获取当前日期时间及其它操作"><a href="#Js获取当前日期时间及其它操作" class="headerlink" title="Js获取当前日期时间及其它操作"></a>Js获取当前日期时间及其它操作</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">myDate.getYear();        <span class="comment">//获取当前年份(2位)</span></span><br><span class="line">myDate.getFullYear();    <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">myDate.getMonth();       <span class="comment">//获取当前月份(0-11,0代表1月)</span></span><br><span class="line">myDate.getDate();        <span class="comment">//获取当前日(1-31)</span></span><br><span class="line">myDate.getDay();         <span class="comment">//获取当前星期X(0-6,0代表星期天)</span></span><br><span class="line">myDate.getTime();        <span class="comment">//获取当前时间(从1970.1.1开始的毫秒数)</span></span><br><span class="line">myDate.getHours();       <span class="comment">//获取当前小时数(0-23)</span></span><br><span class="line">myDate.getMinutes();     <span class="comment">//获取当前分钟数(0-59)</span></span><br><span class="line">myDate.getSeconds();     <span class="comment">//获取当前秒数(0-59)</span></span><br><span class="line">myDate.getMilliseconds();    <span class="comment">//获取当前毫秒数(0-999)</span></span><br><span class="line">myDate.toLocaleDateString();     <span class="comment">//获取当前日期</span></span><br><span class="line"><span class="keyword">var</span> mytime=myDate.toLocaleTimeString();     <span class="comment">//获取当前时间</span></span><br><span class="line">myDate.toLocaleString( );        <span class="comment">//获取日期与时间</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/carekee/articles/1678041.html" target="_blank" rel="noopener">链接地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 常用JS工具代码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git相关指令</title>
      <link href="2019/07/01/LearnGit/"/>
      <url>2019/07/01/LearnGit/</url>
      
        <content type="html"><![CDATA[<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/JohnNashs/learngit.git</span><br></pre></td></tr></table></figure><h2 id="克隆指定分支"><a href="#克隆指定分支" class="headerlink" title="克隆指定分支"></a>克隆指定分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b &lt;name&gt; 仓库地址</span><br></pre></td></tr></table></figure><h2 id="Git-状态"><a href="#Git-状态" class="headerlink" title="Git 状态"></a>Git 状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stauts</span><br></pre></td></tr></table></figure><h2 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h2><ul><li>Working Directory 工作区</li><li>Staging Area 暂存区</li><li>Repository 版本库</li></ul><h2 id="精简命令"><a href="#精简命令" class="headerlink" title="精简命令"></a>精简命令</h2><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将代码提交到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将代码提交到当前分支</span></span><br><span class="line">git commit -m <span class="string">"这里是注释"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将代码提交到线上</span></span><br><span class="line">git push origin &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建分支</span></span><br><span class="line">git branch NewBranchName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git chekcout NewBranchName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地检出一个新的分支并推送到远程仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 1.创建并切换分支（创建本地分支）</span></span><br><span class="line">git checkout -b &lt;name&gt;</span><br><span class="line"><span class="comment">## 2.创建并切换分支（创建本地分支）</span></span><br><span class="line">git push --<span class="built_in">set</span>-upstream origin &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将远程git仓库里的指定分支拉取到本地（本地不存在的分支）</span></span><br><span class="line">git checkout -b 本地分支名 origin/远程分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并某支到当前分支</span></span><br><span class="line">git checkout master <span class="comment">#先切换到master</span></span><br><span class="line">git merge NewBranchName <span class="comment">#将NewBranchName合并到当前的分支master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d NewBranchName</span><br></pre></td></tr></table></figure><h3 id="查看log"><a href="#查看log" class="headerlink" title="查看log"></a>查看log</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 commit log</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看操作记录</span></span><br><span class="line">git relog <span class="comment"># git log -g</span></span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回退若干个版本(回退一个 HEAD^, 回退两个版本是 HEAD^^, 三个是 HEAD^^^, 以此类推 )</span></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照版本号回退</span></span><br><span class="line">git reset --hard HEAD~版本号 <span class="comment"># 版本号不需要写全</span></span><br></pre></td></tr></table></figure><h2 id="重置本地账户密码"><a href="#重置本地账户密码" class="headerlink" title="重置本地账户密码"></a>重置本地账户密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system --<span class="built_in">unset</span> credential.helper</span><br></pre></td></tr></table></figure><h2 id="保存账号密码"><a href="#保存账号密码" class="headerlink" title="保存账号密码"></a>保存账号密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><h2 id="删除本地缓存（项目提交后再建gitignore不生效解决方法）"><a href="#删除本地缓存（项目提交后再建gitignore不生效解决方法）" class="headerlink" title="删除本地缓存（项目提交后再建gitignore不生效解决方法）"></a>删除本地缓存（项目提交后再建gitignore不生效解决方法）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>协同开发应建立自己的分支，再合并到master上</p><h2 id="博客发布指令"><a href="#博客发布指令" class="headerlink" title="博客发布指令"></a>博客发布指令</h2><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-Git-%E5%9F%BA%E7%A1%80" target="_blank" rel="noopener">Git官网</a></p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰</a></p>]]></content>
      
      
      <categories>
          
          <category> Git相关 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
